#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.9 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mrl"
 #"ib\"))\x00"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-snip"
 #"class-wxme.ss\" \"framework\"))\x00"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsis"
 #"-snip-wxme.rkt\" \"drracket\" \"private\"))\x00"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.rk"
 #"t\" \"drracket\" \"private\"))\x00"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 68 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 18 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 36 36 140 255 255 255 -1
-1 0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 34 139 34 255 255 255 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 18 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 36 36 140
255 255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 34 139 34
255 255 255 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 15 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1           0 32 0 28 3 10 #"#lang eopl"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9        2377 21           0 0           0 395 0 17 3 8 #";Pruebas"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 6 #"LEXICA"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 12 #"1.Whitespace"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"just-scan"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"  \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 9 #"2.Comment"
0 0 24 3 1 #" "
0 0 14 3 2 #"//"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"just-scan"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"  //This is a comment\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 2 #"3."
0 0 24 3 1 #" "
0 0 14 3 7 #"Comment"
0 0 24 3 1 #" "
0 0 14 3 2 #"/*"
0 0 24 3 1 #" "
0 0 14 3 2 #"*/"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"just-scan"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"   /*All this"
0 0 19 29 1 #"\n"
0 0 19 3 22 #"                 lines"
0 0 19 29 1 #"\n"
0 0 19 3 20 #"                 are"
0 0 19 29 1 #"\n"
0 0 19 3 28 #"                 comments*/\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 12 #"4.identifier"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"just-scan"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"iden-tif_?\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" (("
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 14 3 10 #"iden-tif_?"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"5.string"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"just-scan"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"$This is a"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"string$\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" (("
0 0 14 3 6 #"string"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"$This is a\\nstring$\""
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 2 #"6."
0 0 24 3 1 #" "
0 0 14 3 9 #"character"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"'c\""
0 0 24 3 1 #" "
0 0 14 3 2 #"da"
0 0 24 3 1 #" "
0 0 14 3 5 #"error"
0 0 28 3 1 #","
0 0 24 3 1 #" "
0 0 14 3 2 #"ya"
0 0 24 3 1 #" "
0 0 14 3 3 #"que"
0 0 24 3 1 #" "
0 0 14 3 2 #"no"
0 0 24 3 1 #" "
0 0 14 3 7 #"incluye"
0 0 24 3 1 #" "
0 0 14 3 2 #"el"
0 0 24 3 1 #" "
0 0 14 3 7 #"espacio"
0 0 24 3 1 #" "
0 0 14 3 4 #"tras"
0 0 24 3 1 #" "
0 0 14 3 2 #"el"
0 0 24 3 1 #" "
0 0 14 3 8 #"caracter"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"just-scan"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"'c \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" (("
0 0 14 3 9 #"character"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"'c \""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 2 #"7."
0 0 24 3 1 #" "
0 0 14 3 7 #"boolean"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"just-scan"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"#true"
0 0 19 29 1 #"\n"
0 0 19 3 8 #" #false\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" (("
0 0 14 3 7 #"boolean"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"boolean"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"#false\""
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 2 #"8."
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 2 #" ("
0 0 14 3 7 #"integer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"just-scan"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"0 5 1954\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"Answer:"
0 0 24 3 3 #" (("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 4 #"1954"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 2 #"9."
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 8 #"negative"
0 0 24 3 1 #" "
0 0 14 3 7 #"integer"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"just-scan"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"-0 -5 -1954\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"Answer:"
0 0 24 3 3 #" (("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 2 #"-5"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 5 #"-1954"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"10."
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 2 #" ("
0 0 14 3 11 #"non-integer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"just-scan"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"0.0 5.2 1954.129854\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"Answer:"
0 0 24 3 3 #" (("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 3 #"5.2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 11 #"1954.129854"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"11."
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 2 #" ("
0 0 14 3 8 #"negative"
0 0 24 3 1 #" "
0 0 14 3 11 #"non-integer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 9 #"just-scan"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"-0.0 -5.2 -1954.129854\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"Answer:"
0 0 24 3 3 #" (("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 4 #"-0.0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 4 #"-5.2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 12 #"-1954.129854"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"12."
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 2 #" ("
0 0 14 3 8 #"negative"
0 0 24 3 1 #" "
0 0 14 3 11 #"non-integer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 9 #"just-scan"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"-0.0 -5.2 -1954.129854\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"Answer:"
0 0 24 3 2 #"(("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 4 #"-0.0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 4 #"-5.2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 12 #"-1954.129854"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9       16315 21           0 0           0 2718 0 14 3 10
#"GRAM\303\201TICA"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 12 #"1.a-programa"
0 0 28 3 1 #","
0 0 24 3 1 #" "
0 0 14 3 6 #"global"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"{} endGlobal 0\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:a-programa"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 10 #" () ()) #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 2 #"2."
0 0 24 3 1 #" "
0 0 14 3 7 #"var-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 69
(4
 #"\"{globalId = var {}; -2} endGlobal var {id1 = -0.0, id2 = 'm }; 1.53"
 #"\""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:a-programa"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 2 #" ("
0 0 14 3 8 #"globalId"
0 0 24 3 5 #") (#("
0 0 14 3 14 #"struct:var-exp"
0 0 24 3 9 #" () () #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"-2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 14 #"struct:var-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"id1"
0 0 24 3 1 #" "
0 0 14 3 3 #"id2"
0 0 24 3 5 #") (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 4 #"-0.0"
0 0 24 3 4 #") #("
0 0 14 3 20 #"struct:character-exp"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"'m \""
0 0 24 3 5 #")) #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 4 #"1.53"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 2 #"3."
0 0 24 3 1 #" "
0 0 14 3 8 #"cons-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 96
(5
 #"\"{globalId = const {}; -180.59594} endGlobal const {id1 = $this is a"
 #" string$, id2 = #false }; 1\""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:a-programa"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 2 #" ("
0 0 14 3 8 #"globalId"
0 0 24 3 5 #") (#("
0 0 14 3 15 #"struct:cons-exp"
0 0 24 3 9 #" () () #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 10 #"-180.59594"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 15 #"struct:cons-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"id1"
0 0 24 3 1 #" "
0 0 14 3 3 #"id2"
0 0 24 3 5 #") (#("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"$this is a string$\""
0 0 24 3 4 #") #("
0 0 14 3 18 #"struct:boolean-exp"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"#false\""
0 0 24 3 5 #")) #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 2 #"4."
0 0 24 3 1 #" "
0 0 14 3 7 #"rec-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 52 #"\"{} endGlobal rec {id1 sub, aux, c = {#true} }; 'r \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:a-programa"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 14 #"struct:rec-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"id1"
0 0 24 3 4 #") (("
0 0 14 3 3 #"sub"
0 0 24 3 1 #" "
0 0 14 3 3 #"aux"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 6 #")) (#("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 3 3 #" #("
0 0 14 3 21 #"struct:simpe-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 6 #"))) #("
0 0 14 3 20 #"struct:character-exp"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"'r \""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 10 #"5.unic-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 84
(6
 #"\"{globalId = unic {}; -180.59594} endGlobal unic {idUnic1 = 5, idUni"
 #"c2 = #true }; 1\""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:a-programa"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 2 #" ("
0 0 14 3 8 #"globalId"
0 0 24 3 5 #") (#("
0 0 14 3 15 #"struct:unic-exp"
0 0 24 3 9 #" () () #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 10 #"-180.59594"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 15 #"struct:unic-exp"
0 0 24 3 2 #" ("
0 0 14 3 7 #"idUnic1"
0 0 24 3 1 #" "
0 0 14 3 7 #"idUnic2"
0 0 24 3 5 #") (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #") #("
0 0 14 3 18 #"struct:boolean-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 5 #")) #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 12 #"6.number-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 55 #"\"{globalId1 = 3, globalId2 = -4321} endGlobal -779.543\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 6 #"answe:"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:a-programa"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 2 #" ("
0 0 14 3 9 #"globalId1"
0 0 24 3 1 #" "
0 0 14 3 9 #"globalId2"
0 0 24 3 5 #") (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 5 #"-4321"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 8 #"-779.543"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 2 #"7."
0 0 24 3 1 #" "
0 0 14 3 13 #"character-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 51 #"\"{globalId1 = 'a , globalId2 = '$ } endGlobal '|  \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 3 #"Not"
0 0 24 3 1 #" "
0 0 14 3 8 #"accepted"
0 0 24 3 1 #" "
0 0 14 3 2 #"as"
0 0 24 3 1 #" "
0 0 14 3 10 #"character:"
0 0 24 3 1 #" "
0 0 14 3 2 #"\\,"
0 0 24 3 1 #" "
0 0 14 3 5 #"\\<any"
0 0 24 3 1 #" "
0 0 14 3 3 #"non"
0 0 24 3 1 #" "
0 0 14 3 8 #"accepted"
0 0 24 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 24 3 1 #" "
0 0 14 3 3 #"eg:"
0 0 24 3 1 #" "
0 0 14 3 3 #"\\j>"
0 0 28 3 1 #","
0 0 24 3 2 #"  "
0 0 19 3 11 #"\"         \""
0 0 24 3 2 #" ("
0 0 14 3 2 #"La"
0 0 24 3 1 #" "
0 0 14 3 7 #"segunda"
0 0 24 3 1 #" "
0 0 14 3 7 #"comilla"
0 0 24 3 1 #" "
0 0 14 3 2 #"es"
0 0 24 3 1 #" "
0 0 14 3 4 #"para"
0 0 24 3 1 #" "
0 0 14 3 6 #"cerrar"
0 0 24 3 1 #" "
0 0 14 3 2 #"la"
0 0 24 3 1 #" "
0 0 14 3 7 #"primera"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Accepted"
0 0 24 3 1 #" "
0 0 14 3 2 #"as"
0 0 24 3 1 #" "
0 0 14 3 10 #"character:"
0 0 24 3 1 #" "
0 0 14 3 10 #"whitespace"
0 0 28 3 1 #","
0 0 24 3 1 #" "
0 0 14 3 2 #"\\\""
0 0 28 3 1 #","
0 0 24 3 1 #" "
0 0 14 3 2 #"\\n"
0 0 28 3 1 #","
0 0 24 3 1 #" "
0 0 14 3 2 #"\\a"
0 0 28 3 1 #","
0 0 24 3 1 #" "
0 0 15 3 2 #"\316\273"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:a-programa"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 2 #" ("
0 0 14 3 9 #"globalId1"
0 0 24 3 1 #" "
0 0 14 3 9 #"globalId2"
0 0 24 3 5 #") (#("
0 0 14 3 20 #"struct:character-exp"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"'a \""
0 0 24 3 4 #") #("
0 0 14 3 20 #"struct:character-exp"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"'$ \""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 20 #"struct:character-exp"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"'| \""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 2 #"8."
0 0 24 3 1 #" "
0 0 14 3 10 #"string-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 145
(7
 #"\"{globalId1 = $Strings can include whitespaces$ , globalId2 = $also "
 #"letters, numbers 5654684, and other symbols: ! % & / ( ) = ? \xC2\xA1"
 #" $ } endGlobal"
) 0 0 19 29 1 #"\n"
0 0 19 3 32 #"  $but not money symbol or  $  \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:a-programa"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"globalId1"
0 0 24 3 1 #" "
0 0 14 3 9 #"globalId2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    (#("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 35 #"\"$Strings can include whitespaces$\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     #("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 73
(8
 #"\"$also letters, numbers 5654684, and other symbols: ! % & / ( ) = ? "
 #"\xC2\xA1 $\""
) 0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"$but not money symbol or  $\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 2 #"9."
0 0 24 3 1 #" "
0 0 14 3 11 #"boolean-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 59
#"\"{globalId1 = #true , globalId2 = #false } endGlobal #true\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:a-programa"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 2 #" ("
0 0 14 3 9 #"globalId1"
0 0 24 3 1 #" "
0 0 14 3 9 #"globalId2"
0 0 24 3 5 #") (#("
0 0 14 3 18 #"struct:boolean-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 4 #") #("
0 0 14 3 18 #"struct:boolean-exp"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"#false\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 18 #"struct:boolean-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"10."
0 0 24 3 1 #" "
0 0 14 3 9 #"allot-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"{} endGlobal idAllot -> 5\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:a-programa"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 10 #" () ()) #("
0 0 14 3 16 #"struct:allot-exp"
0 0 24 3 1 #" "
0 0 14 3 7 #"idAllot"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"11."
0 0 24 3 1 #" "
0 0 14 3 9 #"octal-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 82
(9
 #"\"{globalId1 = x8(0) , globalId2 = x8(153, 25.7) } endGlobal x8(-0, -"
 #"15.24, 44502)\""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 8 #"answer:#"
0 0 24 3 1 #"("
0 0 14 3 17 #"struct:a-programa"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 2 #" ("
0 0 14 3 9 #"globalId1"
0 0 24 3 1 #" "
0 0 14 3 9 #"globalId2"
0 0 24 3 5 #") (#("
0 0 14 3 16 #"struct:octal-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 7 #" ()) #("
0 0 14 3 16 #"struct:octal-exp"
0 0 24 3 1 #" "
0 0 21 3 3 #"153"
0 0 24 3 2 #" ("
0 0 21 3 4 #"25.7"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 16 #"struct:octal-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 21 3 6 #"-15.24"
0 0 24 3 1 #" "
0 0 21 3 5 #"44502"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"12."
0 0 24 3 1 #" "
0 0 14 3 8 #"list-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 71
(10
 #"\"{globalId1 = [] , globalId2 = [x8(153, 25.7)] } endGlobal ['c , #tr"
 #"ue,"
) 0 0 19 29 1 #"\n"
0 0 19 3 65
#"  [$nested list expression$, [$even more nested list$]], 8, 'a ]\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:a-programa"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 2 #" ("
0 0 14 3 9 #"globalId1"
0 0 24 3 1 #" "
0 0 14 3 9 #"globalId2"
0 0 24 3 5 #") (#("
0 0 14 3 15 #"struct:list-exp"
0 0 24 3 7 #" ()) #("
0 0 14 3 15 #"struct:list-exp"
0 0 24 3 4 #" (#("
0 0 14 3 16 #"struct:octal-exp"
0 0 24 3 1 #" "
0 0 21 3 3 #"153"
0 0 24 3 2 #" ("
0 0 21 3 4 #"25.7"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 15 #"struct:list-exp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    (#("
0 0 14 3 20 #"struct:character-exp"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"'c \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     #("
0 0 14 3 18 #"struct:boolean-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     #("
0 0 14 3 15 #"struct:list-exp"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"       (#("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 26 #"\"$nested list expression$\""
0 0 24 3 4 #") #("
0 0 14 3 15 #"struct:list-exp"
0 0 24 3 4 #" (#("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"$even more nested list$\""
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     #("
0 0 14 3 20 #"struct:character-exp"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"'a \""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"13."
0 0 24 3 1 #" "
0 0 14 3 8 #"cons-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"{} endGlobal cons(0 [1,2,3])\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 15 #"struct:cons-exp"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #") #("
0 0 14 3 15 #"struct:list-exp"
0 0 24 3 4 #" (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"14."
0 0 24 3 1 #" "
0 0 14 3 8 #"func-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 32 #"\"{} endGlobal func(x,y) {(x+y)}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 15 #"struct:func-exp"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #") #("
0 0 14 3 22 #"struct:primapp-bin-exp"
0 0 24 3 3 #" #("
0 0 14 3 21 #"struct:identifier-exp"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #") #("
0 0 14 3 15 #"struct:add-prim"
0 0 24 3 4 #") #("
0 0 14 3 21 #"struct:identifier-exp"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"15."
0 0 24 3 1 #" "
0 0 14 3 7 #"map-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 44 #"\"{} endGlobal map(func(x){(x+1)} [2,3,5,7])\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 14 #"struct:map-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 15 #"struct:func-exp"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 4 #") #("
0 0 14 3 22 #"struct:primapp-bin-exp"
0 0 24 3 3 #" #("
0 0 14 3 21 #"struct:identifier-exp"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #") #("
0 0 14 3 15 #"struct:add-prim"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 15 #"struct:list-exp"
0 0 24 3 4 #" (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"16."
0 0 24 3 1 #" "
0 0 14 3 10 #"filter-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 55 #"\"{} endGlobal filter(func(a) {even? (a)} [1, 2, 4, 5])\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:filter-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 15 #"struct:func-exp"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 4 #") #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:oper-a-exp"
0 0 24 3 3 #" #("
0 0 14 3 20 #"struct:even-bol-prim"
0 0 24 3 4 #") #("
0 0 14 3 21 #"struct:identifier-exp"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 15 #"struct:list-exp"
0 0 24 3 4 #" (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"17."
0 0 24 3 1 #" "
0 0 14 3 10 #"maxVal-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 34 #"\"{} endGlobal maxVal([6,7,8,1,0])\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:maxVal-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 15 #"struct:list-exp"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"18."
0 0 24 3 1 #" "
0 0 14 3 10 #"minVal-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 32 #"\"{} endGlobal minVal([1,2,3,4])\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:minVal-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 15 #"struct:list-exp"
0 0 24 3 4 #" (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"19."
0 0 24 3 1 #" "
0 0 14 3 10 #"n-root-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 26 #"\"{} endGlobal n-root(4,2)\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 16 #"struct:a-program"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 10 #" () ()) #("
0 0 14 3 17 #"struct:n-root-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"20."
0 0 24 3 1 #" "
0 0 14 3 13 #"power-nth-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"{} endGlobal power-nth (4,3)\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 16 #"struct:a-program"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 10 #" () ()) #("
0 0 14 3 16 #"struct:power-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"21."
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 21 3 3 #"13."
0 0 24 3 1 #" "
0 0 14 3 10 #"vector-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #"{"
0 0 19 3 9 #"globalId1"
0 0 19 3 1 #" "
0 0 19 3 1 #"="
0 0 19 3 1 #" "
0 0 19 3 6 #"vector"
0 0 19 3 3 #"[] "
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 9 #"globalId2"
0 0 19 3 1 #" "
0 0 19 3 1 #"="
0 0 19 3 1 #" "
0 0 19 3 6 #"vector"
0 0 19 3 1 #"["
0 0 19 3 2 #"x8"
0 0 19 3 1 #"("
0 0 19 3 3 #"153"
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 4 #"25.7"
0 0 19 3 5 #")] } "
0 0 19 3 9 #"endGlobal"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 19 3 6 #"vector"
0 0 19 3 1 #"["
0 0 19 3 1 #"'"
0 0 19 3 1 #"c"
0 0 19 3 1 #" "
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 5 #"#true"
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 6 #"vector"
0 0 19 3 1 #"["
0 0 19 3 7 #"$nested"
0 0 19 3 1 #" "
0 0 19 3 6 #"vector"
0 0 19 3 1 #" "
0 0 19 3 11 #"expression$"
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 6 #"vector"
0 0 19 3 1 #"["
0 0 19 3 5 #"$even"
0 0 19 3 1 #" "
0 0 19 3 4 #"more"
0 0 19 3 1 #" "
0 0 19 3 6 #"nested"
0 0 19 3 1 #" "
0 0 19 3 6 #"vector"
0 0 19 3 1 #" "
0 0 19 3 11 #"expression$"
0 0 19 3 2 #"]]"
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 1 #"8"
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 1 #"'"
0 0 19 3 3 #"a ]"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:a-programa"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 2 #" ("
0 0 14 3 9 #"globalId1"
0 0 24 3 1 #" "
0 0 14 3 9 #"globalId2"
0 0 24 3 5 #") (#("
0 0 14 3 17 #"struct:vector-exp"
0 0 24 3 7 #" ()) #("
0 0 14 3 17 #"struct:vector-exp"
0 0 24 3 4 #" (#("
0 0 14 3 16 #"struct:octal-exp"
0 0 24 3 1 #" "
0 0 21 3 3 #"153"
0 0 24 3 2 #" ("
0 0 21 3 4 #"25.7"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:vector-exp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    (#("
0 0 14 3 20 #"struct:character-exp"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #"'"
0 0 19 3 2 #"c "
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     #("
0 0 14 3 18 #"struct:boolean-exp"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"#true"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     #("
0 0 14 3 17 #"struct:vector-exp"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"       (#("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"$nested"
0 0 19 3 1 #" "
0 0 19 3 6 #"vector"
0 0 19 3 12 #" expression$"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        #("
0 0 14 3 17 #"struct:vector-exp"
0 0 24 3 4 #" (#("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"$even"
0 0 19 3 1 #" "
0 0 19 3 4 #"more"
0 0 19 3 1 #" "
0 0 19 3 6 #"nested"
0 0 19 3 1 #" "
0 0 19 3 6 #"vector"
0 0 19 3 12 #" expression$"
0 0 19 3 1 #"\""
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     #("
0 0 14 3 20 #"struct:character-exp"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #"'"
0 0 19 3 2 #"a "
0 0 19 3 1 #"\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"14."
0 0 24 3 1 #" "
0 0 14 3 10 #"record-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #"{"
0 0 19 3 9 #"globalId1"
0 0 19 3 1 #" "
0 0 19 3 1 #"="
0 0 19 3 1 #" "
0 0 19 3 6 #"record"
0 0 19 3 1 #"{"
0 0 19 3 3 #"id1"
0 0 19 3 1 #" "
0 0 19 3 1 #"="
0 0 19 3 1 #" "
0 0 19 3 3 #"$at"
0 0 19 3 1 #" "
0 0 19 3 5 #"least"
0 0 19 3 1 #" "
0 0 19 3 3 #"one"
0 0 19 3 1 #" "
0 0 19 3 6 #"allot$"
0 0 19 3 2 #"} "
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 9 #"globalId2"
0 0 19 3 1 #" "
0 0 19 3 1 #"="
0 0 19 3 1 #" "
0 0 19 3 6 #"record"
0 0 19 3 1 #"{"
0 0 19 3 4 #"idRG"
0 0 19 3 1 #" "
0 0 19 3 1 #"="
0 0 19 3 1 #" "
0 0 19 3 1 #"1"
0 0 19 3 4 #"} } "
0 0 19 3 9 #"endGlobal"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"record"
0 0 19 3 1 #"{"
0 0 19 3 6 #"recId1"
0 0 19 3 1 #" "
0 0 19 3 1 #"="
0 0 19 3 1 #" "
0 0 19 3 1 #"'"
0 0 19 3 1 #"c"
0 0 19 3 1 #" "
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 6 #"recId2"
0 0 19 3 1 #" "
0 0 19 3 1 #"="
0 0 19 3 1 #" "
0 0 19 3 12 #"$Jerusalema$"
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 6 #"recId3"
0 0 19 3 1 #" "
0 0 19 3 1 #"="
0 0 19 3 1 #" "
0 0 19 3 6 #"vector"
0 0 19 3 1 #"["
0 0 19 3 10 #"5; 2; 8]}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:a-programa"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"globalId1"
0 0 24 3 1 #" "
0 0 14 3 9 #"globalId2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    (#("
0 0 14 3 17 #"struct:record-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"id1"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"$at least one allot$\""
0 0 24 3 8 #") () ())"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     #("
0 0 14 3 17 #"struct:record-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"idRG"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 10 #") () ())))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:record-exp"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 6 #"recId1"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 20 #"struct:character-exp"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"'c \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"recId2"
0 0 24 3 1 #" "
0 0 14 3 6 #"recId3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    (#("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"$Jerusalema$\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     #("
0 0 14 3 17 #"struct:vector-exp"
0 0 24 3 4 #" (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"15."
0 0 24 3 1 #" "
0 0 14 3 8 #"bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 52 #"\"{globalId1 = #true , globalId2 = #false } endGlobal"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"#false\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:a-programa"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 2 #" ("
0 0 14 3 9 #"globalId1"
0 0 24 3 1 #" "
0 0 14 3 9 #"globalId2"
0 0 24 3 5 #") (#("
0 0 14 3 18 #"struct:boolean-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 4 #") #("
0 0 14 3 18 #"struct:boolean-exp"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"#false\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 18 #"struct:boolean-exp"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"#false\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"16."
0 0 24 3 1 #" "
0 0 14 3 12 #"sequence-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 52 #"\"{globalId1 = #true , globalId2 = #false } endGlobal"
0 0 19 29 1 #"\n"
0 0 19 3 49 #"sequence (6; #true; sequence($nested sequence$))\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:a-programa"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 2 #" ("
0 0 14 3 9 #"globalId1"
0 0 24 3 1 #" "
0 0 14 3 9 #"globalId2"
0 0 24 3 5 #") (#("
0 0 14 3 18 #"struct:boolean-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 4 #") #("
0 0 14 3 18 #"struct:boolean-exp"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"#false\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 19 #"struct:sequence-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    (#("
0 0 14 3 18 #"struct:boolean-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 4 #") #("
0 0 14 3 19 #"struct:sequence-exp"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"$nested sequence$\""
0 0 24 3 8 #") ()))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"17."
0 0 24 3 1 #" "
0 0 14 3 11 #"compare-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"{} endGlobal"
0 0 19 29 1 #"\n"
0 0 19 3 45 #"if (compare < (19, -23.5)) then {1} else {0}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:a-programa"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 13 #"struct:if-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 18 #"struct:compare-exp"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:less-prim"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"19"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 5 #"-23.5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"18."
0 0 24 3 1 #" "
0 0 14 3 13 #"oper-bin-bool"
0 0 14 3 4 #"-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"{} endGlobal"
0 0 19 29 1 #"\n"
0 0 19 3 57
#"if (xor ({#true}, {#false}, {#false})) then {1} else {0}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:a-programa"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 13 #"struct:if-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 19 #"struct:oper-bin-exp"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 15 #"struct:xor-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 21 #"struct:simpe-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 21 #"struct:simpe-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"#false\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      (#("
0 0 14 3 21 #"struct:simpe-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"#false\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"19."
0 0 24 3 1 #" "
0 0 14 3 14 #"simpe-bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"{} endGlobal"
0 0 19 29 1 #"\n"
0 0 19 3 9 #"{#false}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:a-programa"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 10 #" () ()) #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 3 3 #" #("
0 0 14 3 21 #"struct:simpe-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"#false\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"20."
0 0 24 3 1 #" "
0 0 14 3 10 #"oper-a-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"{} endGlobal"
0 0 19 29 1 #"\n"
0 0 19 3 15 #"not ({#false})\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"Answer:"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:a-programa"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:oper-a-exp"
0 0 24 3 3 #" #("
0 0 14 3 15 #"struct:not-prim"
0 0 24 3 4 #") #("
0 0 14 3 21 #"struct:simpe-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"#false\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"21."
0 0 24 3 1 #" "
0 0 14 3 12 #"sequence-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"{} endGlobal"
0 0 19 29 1 #"\n"
0 0 19 3 62
#"sequence (#true; xor ({#true}, {#false}, {#true}); x8(1623) )\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"Answer:"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:a-programa"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 19 #"struct:sequence-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 18 #"struct:boolean-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    (#("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       #("
0 0 14 3 19 #"struct:oper-bin-exp"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         #("
0 0 14 3 15 #"struct:xor-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         #("
0 0 14 3 21 #"struct:simpe-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         #("
0 0 14 3 21 #"struct:simpe-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"#false\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"         (#("
0 0 14 3 21 #"struct:simpe-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     #("
0 0 14 3 16 #"struct:octal-exp"
0 0 24 3 1 #" "
0 0 21 3 4 #"1623"
0 0 24 3 7 #" ()))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"22."
0 0 24 3 1 #" "
0 0 14 3 6 #"if-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"{} endGlobal"
0 0 19 29 1 #"\n"
0 0 19 3 45 #"if (compare < (19, -23.5)) then {1} else {0}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:a-programa"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 13 #"struct:if-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 18 #"struct:compare-exp"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:less-prim"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"19"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 5 #"-23.5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"23."
0 0 24 3 1 #" "
0 0 14 3 8 #"cond-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"{} endGlobal"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"cond"
0 0 19 29 1 #"\n"
0 0 19 3 28 #"  [compare < (19, -23.5)] 'F"
0 0 19 29 1 #"\n"
0 0 19 3 41 #"  [ and ({#true}, {#false}, {#true} )] 15"
0 0 19 29 1 #"\n"
0 0 19 3 29 #"  [compare <> (0, 0.1)] $OMG$"
0 0 19 29 1 #"\n"
0 0 19 3 19 #"  else back_V -> -1"
0 0 19 29 1 #"\n"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"Answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 17 #"struct:a-programa"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 15 #"struct:cond-exp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    (#("
0 0 14 3 18 #"struct:compare-exp"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:less-prim"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"19"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 5 #"-23.5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     #("
0 0 14 3 19 #"struct:oper-bin-exp"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       #("
0 0 14 3 15 #"struct:and-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       #("
0 0 14 3 21 #"struct:simpe-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       #("
0 0 14 3 21 #"struct:simpe-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"#false\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"       (#("
0 0 14 3 21 #"struct:simpe-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     #("
0 0 14 3 18 #"struct:compare-exp"
0 0 24 3 3 #" #("
0 0 14 3 21 #"struct:different-prim"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    (#("
0 0 14 3 20 #"struct:character-exp"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"'F\\n\""
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"$OMG$\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 16 #"struct:allot-exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"back_V"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"24."
0 0 24 3 1 #" "
0 0 14 3 7 #"for-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"{} endGlobal"
0 0 19 29 1 #"\n"
0 0 19 3 49 #"for (id1 = 16; downto 0) {xVal -> not ({#true})}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"Answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 17 #"struct:a-programa"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 14 #"struct:for-exp"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 3 #"id1"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:downto-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 16 #"struct:allot-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"xVal"
0 0 24 3 3 #" #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:oper-a-exp"
0 0 24 3 3 #" #("
0 0 14 3 15 #"struct:not-prim"
0 0 24 3 4 #") #("
0 0 14 3 21 #"struct:simpe-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"25."
0 0 24 3 1 #" "
0 0 14 3 6 #"to-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"{} endGlobal"
0 0 19 29 1 #"\n"
0 0 19 3 45 #"for (id1 = 16; to 0) {xVal -> not ({#true})}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"Answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 17 #"struct:a-programa"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 14 #"struct:for-exp"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 3 #"id1"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 13 #"struct:to-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 16 #"struct:allot-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"xVal"
0 0 24 3 3 #" #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:oper-a-exp"
0 0 24 3 3 #" #("
0 0 14 3 15 #"struct:not-prim"
0 0 24 3 4 #") #("
0 0 14 3 21 #"struct:simpe-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"26."
0 0 24 3 1 #" "
0 0 14 3 10 #"downto-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"{} endGlobal"
0 0 19 29 1 #"\n"
0 0 19 3 49 #"for (id1 = 16; downto 0) {xVal -> not ({#true})}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"Answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 17 #"struct:a-programa"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 14 #"struct:for-exp"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 3 #"id1"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:downto-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 16 #"struct:allot-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"xVal"
0 0 24 3 3 #" #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:oper-a-exp"
0 0 24 3 3 #" #("
0 0 14 3 15 #"struct:not-prim"
0 0 24 3 4 #") #("
0 0 14 3 21 #"struct:simpe-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"27."
0 0 24 3 1 #" "
0 0 14 3 15 #"primapp-bin-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"{} endGlobal"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"(25%3)\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"Answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 17 #"struct:a-programa"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 22 #"struct:primapp-bin-exp"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"25"
0 0 24 3 4 #") #("
0 0 14 3 15 #"struct:mod-prim"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"28."
0 0 24 3 1 #" "
0 0 14 3 14 #"primapp-un-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"{} endGlobal"
0 0 19 29 1 #"\n"
0 0 19 3 11 #"++(x8(17))\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"Answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 17 #"struct:a-programa"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 10 #" () ()) #("
0 0 14 3 21 #"struct:primapp-un-exp"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:add1-prim"
0 0 24 3 4 #") #("
0 0 14 3 16 #"struct:octal-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"17"
0 0 24 3 6 #" ())))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"29."
0 0 24 3 1 #" "
0 0 14 3 18 #"primapp-bin-string"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 42 #"\"{} endGlobal concat ( $Head$, $-tail.$ )\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"Answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 17 #"struct:a-programa"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 25 #"struct:primapp-bin-string"
0 0 24 3 3 #" #("
0 0 14 3 18 #"struct:concat-prim"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"$Head$\""
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"$-tail.$\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"30."
0 0 24 3 1 #" "
0 0 14 3 21 #"primapp-un-string-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 37 #"\"{} endGlobal length ( $Head-tail.$)\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"Answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 17 #"struct:a-programa"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 28 #"struct:primapp-un-string-exp"
0 0 24 3 3 #" #("
0 0 14 3 18 #"struct:length-prim"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"$Head-tail.$\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"31."
0 0 24 3 1 #" "
0 0 14 3 13 #"null-list-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"{} endGlobal null\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 17 #"struct:a-programa"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 10 #" () ()) #("
0 0 14 3 20 #"struct:null-list-exp"
0 0 24 3 3 #" #("
0 0 14 3 21 #"struct:null-list-prim"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"32."
0 0 24 3 1 #" "
0 0 14 3 19 #"primapp-un-list-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 62
#"\"{} endGlobal create-list (16 , x8(621), $random words$, 'k )\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 17 #"struct:a-programa"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 26 #"struct:primapp-un-list-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 23 #"struct:create-list-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 4 #") #("
0 0 14 3 16 #"struct:octal-exp"
0 0 24 3 1 #" "
0 0 21 3 3 #"621"
0 0 24 3 7 #" ()) #("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"$random words$\""
0 0 24 3 4 #") #("
0 0 14 3 20 #"struct:character-exp"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"'k \""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 32 #"\"{} endGlobal top([4, 5, 6, 7])\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 26 #"struct:primapp-un-list-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 21 #"struct:head-list-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 15 #"struct:list-exp"
0 0 24 3 4 #" (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"{} endGlobal null?([])\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 3 3 #" #("
0 0 14 3 25 #"struct:null-pred-bool-exp"
0 0 24 3 3 #" #("
0 0 14 3 21 #"struct:pred-null-prim"
0 0 24 3 4 #") #("
0 0 14 3 15 #"struct:list-exp"
0 0 24 3 7 #" ()))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 54 #"\"{} endGlobal pop([$hey$, $this$, $is$, $a$, $list$])\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 26 #"struct:primapp-un-list-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 21 #"struct:tail-list-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 15 #"struct:list-exp"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      (#("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"$hey$\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       #("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"$this$\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       #("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"$is$\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       #("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"$a$\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       #("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"$list$\""
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"33."
0 0 24 3 1 #" "
0 0 14 3 11 #"create-list"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 35 #"\"{} endGlobal create-list[5 2 0 2]\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 26 #"struct:primapp-create-list"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 23 #"struct:create-list-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"33."
0 0 24 3 1 #" "
0 0 14 3 20 #"primapp-bin-list-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"{} "
0 0 19 3 9 #"endGlobal"
0 0 19 3 1 #" "
0 0 19 3 6 #"append"
0 0 19 3 2 #" ("
0 0 19 3 11 #"create-list"
0 0 19 3 2 #" ("
0 0 19 3 2 #"16"
0 0 19 3 1 #" "
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 2 #"x8"
0 0 19 3 1 #"("
0 0 19 3 3 #"621"
0 0 19 3 1 #")"
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 7 #"$random"
0 0 19 3 1 #" "
0 0 19 3 6 #"words$"
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 1 #"'"
0 0 19 3 1 #"k"
0 0 19 3 2 #" )"
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 6 #"null)\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 17 #"struct:a-programa"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 27 #"struct:primapp-bin-list-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 23 #"struct:append-list-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 26 #"struct:primapp-un-list-exp"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 23 #"struct:create-list-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 4 #") #("
0 0 14 3 16 #"struct:octal-exp"
0 0 24 3 1 #" "
0 0 21 3 3 #"621"
0 0 24 3 7 #" ()) #("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"$random"
0 0 19 3 8 #" words$\""
0 0 24 3 4 #") #("
0 0 14 3 20 #"struct:character-exp"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #"'"
0 0 19 3 3 #"k \""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 20 #"struct:null-list-exp"
0 0 24 3 3 #" #("
0 0 14 3 21 #"struct:null-list-prim"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"34."
0 0 24 3 1 #" "
0 0 14 3 22 #"primapp-bin-set-vector"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"{} "
0 0 19 3 42 #"endGlobal set-vector (1 20 vector[5,2,3])\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 29 #"struct:primapp-bin-set-vector"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 22 #"struct:set-vector-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 1 #"1"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:vector-exp"
0 0 24 3 4 #" (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 17 #"struct:a-programa"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 10 #" () ()) #("
0 0 14 3 21 #"struct:primapp-vector"
0 0 24 3 3 #" #("
0 0 14 3 22 #"struct:ref-vector-prim"
0 0 24 3 2 #") "
0 0 21 3 2 #"16"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"19"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"35."
0 0 24 3 1 #" "
0 0 14 3 21 #"primapp-create-vector"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"{} "
0 0 19 3 9 #"endGlobal"
0 0 19 3 1 #" "
0 0 19 3 14 #"#create-vector"
0 0 19 3 2 #" ("
0 0 19 3 2 #"x8"
0 0 19 3 1 #"("
0 0 19 3 1 #"0"
0 0 19 3 1 #")"
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 2 #"x8"
0 0 19 3 1 #"("
0 0 19 3 3 #"162"
0 0 19 3 1 #")"
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 2 #"x8"
0 0 19 3 1 #"("
0 0 19 3 5 #"47))\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 17 #"struct:a-programa"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 28 #"struct:primapp-create-vector"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 25 #"struct:create-vector-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    (#("
0 0 14 3 16 #"struct:octal-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 7 #" ()) #("
0 0 14 3 16 #"struct:octal-exp"
0 0 24 3 1 #" "
0 0 21 3 3 #"162"
0 0 24 3 7 #" ()) #("
0 0 14 3 16 #"struct:octal-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"47"
0 0 24 3 7 #" ()))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"36."
0 0 24 3 1 #" "
0 0 14 3 18 #"primapp-bin-record"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"{} "
0 0 19 3 9 #"endGlobal"
0 0 19 3 1 #" "
0 0 19 3 10 #"set-record"
0 0 19 3 1 #"("
0 0 19 3 6 #"-18.06"
0 0 19 3 1 #" "
0 0 19 3 7 #"#true)\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 17 #"struct:a-programa"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 25 #"struct:primapp-bin-record"
0 0 24 3 3 #" #("
0 0 14 3 22 #"struct:set-record-prim"
0 0 24 3 2 #") "
0 0 21 3 6 #"-18.06"
0 0 24 3 3 #" #("
0 0 14 3 18 #"struct:boolean-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"37."
0 0 24 3 1 #" "
0 0 14 3 17 #"primapp-un-record"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"{} "
0 0 19 3 9 #"endGlobal"
0 0 19 3 1 #" "
0 0 19 3 7 #"record?"
0 0 19 3 1 #"("
0 0 19 3 10 #"set-record"
0 0 19 3 1 #"("
0 0 19 3 6 #"-18.06"
0 0 19 3 1 #" "
0 0 19 3 8 #"#true))\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"Expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 17 #"struct:a-programa"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 24 #"struct:primapp-un-record"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 23 #"struct:record-pred-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 25 #"struct:primapp-bin-record"
0 0 24 3 3 #" #("
0 0 14 3 22 #"struct:set-record-prim"
0 0 24 3 2 #") "
0 0 21 3 6 #"-18.06"
0 0 24 3 3 #" #("
0 0 14 3 18 #"struct:boolean-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0           0

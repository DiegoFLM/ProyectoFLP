#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.9 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mrl"
 #"ib\"))\x00"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-snip"
 #"class-wxme.ss\" \"framework\"))\x00"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsis"
 #"-snip-wxme.rkt\" \"drracket\" \"private\"))\x00"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.rk"
 #"t\" \"drracket\" \"private\"))\x00"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 67 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 36 36 140 255 255 255 -1
-1 0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 34 139 34 255 255 255 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 36 36 140
255 255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 34 139 34
255 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 15 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1           0 1592 0 28 3 10 #"#lang eopl"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"lexica"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 24 3 3 #"( ("
0 0 14 3 8 #"white-sp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"whitespace"
0 0 24 3 2 #") "
0 0 14 3 4 #"skip"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"comment"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 19 3 4 #"\"//\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 21 3 9 #"#\\newline"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"skip"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"comment"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 19 3 4 #"\"/*\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 3 #"any"
0 0 24 3 2 #") "
0 0 19 3 4 #"\"*/\""
0 0 24 3 2 #") "
0 0 14 3 4 #"skip"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"identifier"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"letter"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 6 #"letter"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"_\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"?\""
0 0 24 3 4 #"))) "
0 0 14 3 6 #"symbol"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"string"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"$\""
0 0 24 3 3 #"  ("
0 0 14 3 5 #"arbno"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\$"
0 0 24 3 4 #") ) "
0 0 19 3 3 #"\"$\""
0 0 24 3 3 #" ) "
0 0 14 3 6 #"string"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"character"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"'\""
0 0 24 3 1 #" "
0 0 14 3 3 #"any"
0 0 24 3 1 #" "
0 0 14 3 10 #"whitespace"
0 0 24 3 2 #") "
0 0 14 3 6 #"string"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"boolean"
0 0 24 3 3 #" ( "
0 0 19 3 3 #"\"#\""
0 0 24 3 1 #"("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"true\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"false\""
0 0 24 3 4 #") ) "
0 0 14 3 6 #"string"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"number"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 3 #")) "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"number"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 3 #")) "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"number"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #") "
0 0 19 3 3 #"\".\""
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 3 #")) "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"number"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #") "
0 0 19 3 3 #"\".\""
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 3 #")) "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"retornarString"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"substring"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #"("
0 0 14 3 13 #"string-length"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 21 3 1 #"1"
0 0 24 3 3 #") )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"retornarCaracter"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"substring"
0 0 24 3 1 #" "
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"gramatica"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 8 #"programa"
0 0 24 3 2 #" ("
0 0 14 3 6 #"global"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"endGlobal\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 9 #"a-program"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"global"
0 0 24 3 3 #" ( "
0 0 19 3 3 #"\"{\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 2 #"  "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #"  "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"}\""
0 0 24 3 3 #" ) "
0 0 14 3 10 #"exp-global"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ( "
0 0 19 3 5 #"\"var\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"}\""
0 0 24 3 2 #"  "
0 0 19 3 3 #"\";\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 7 #"var-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ( "
0 0 19 3 7 #"\"const\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"}\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 9 #"const-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ( "
0 0 19 3 5 #"\"rec\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"}\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 7 #"rec-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ( "
0 0 19 3 6 #"\"unic\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"}\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 8 #"unic-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 10 #"identifier"
0 0 24 3 2 #") "
0 0 14 3 14 #"identifier-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 6 #"number"
0 0 24 3 2 #") "
0 0 14 3 10 #"number-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 9 #"character"
0 0 24 3 2 #") "
0 0 14 3 13 #"character-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 6 #"string"
0 0 24 3 2 #") "
0 0 14 3 10 #"string-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 7 #"boolean"
0 0 24 3 2 #") "
0 0 14 3 11 #"boolean-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"allot\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"->\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 9 #"allot-exp"
0 0 24 3 3 #")  "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ( "
0 0 19 3 4 #"\"x8\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #" ) "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 9 #"octal-exp"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ( "
0 0 19 3 3 #"\"[\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"]\""
0 0 24 3 3 #" ) "
0 0 14 3 8 #"list-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ( "
0 0 19 3 6 #"\"cons\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #"  "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 8 #"cons-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"func\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 3 #" ) "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"}\""
0 0 24 3 2 #") "
0 0 14 3 8 #"func-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"map\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 7 #"map-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"filter\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 10 #"filter-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"maxVal\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 10 #"maxVal-exp"
0 0 24 3 2 #") "
0 0 17 3 15 #";list or vector"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"minVal\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 10 #"minVal-exp"
0 0 24 3 2 #") "
0 0 17 3 15 #";list or vector"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"prime?\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 9 #"prime-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"odd?\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 7 #"odd-exp"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"even?\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 8 #"even-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ( "
0 0 19 3 11 #"\"quickSort\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 9 #"pred-prim"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 13 #"quickSort-exp"
0 0 24 3 2 #") "
0 0 17 3 15 #";list or vector"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ( "
0 0 19 3 16 #"\"insert-element\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 10 #"insert-exp"
0 0 24 3 2 #") "
0 0 17 3 15 #";list or vector"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 10 #"\"existsIn\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 10 #"exists-exp"
0 0 24 3 2 #") "
0 0 17 3 56 #";list or vector : returns index if exists, -1 otherwise."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 16 #"\"remove-element\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 10 #"remove-exp"
0 0 24 3 2 #") "
0 0 17 3 16 #";list or vector."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 16 #"\"relative-prime\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 18 #"relative-prime-exp"
0 0 24 3 2 #") "
0 0 17 3 15 #";two numbers.  "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ( "
0 0 19 3 8 #"\"vector\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"[\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 24 3 3 #" ) "
0 0 19 3 3 #"\"]\""
0 0 24 3 3 #" ) "
0 0 14 3 10 #"vector-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"record\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 3 #")  "
0 0 19 3 3 #"\"}\""
0 0 24 3 2 #") "
0 0 14 3 10 #"record-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 9 #"expr-bool"
0 0 24 3 2 #") "
0 0 14 3 8 #"bool-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"expr-bool"
0 0 24 3 3 #" ( "
0 0 19 3 9 #"\"compare\""
0 0 24 3 2 #"  "
0 0 14 3 9 #"pred-prim"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 16 #"compare-bool-exp"
0 0 24 3 2 #") "
0 0 17 3 26 #";(> expression expression)"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"expr-bool"
0 0 24 3 3 #" ( "
0 0 14 3 13 #"oper-bin-bool"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 9 #"expr-bool"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #" "
0 0 14 3 9 #"expr-bool"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #" "
0 0 14 3 9 #"expr-bool"
0 0 24 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 17 #"oper-bin-bool-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"expr-bool"
0 0 24 3 2 #" ("
0 0 14 3 21 #"primitive-pred-vector"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 20 #"vector-pred-bool-exp"
0 0 24 3 2 #") "
0 0 17 3 8 #";vector?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"expr-bool"
0 0 24 3 2 #" ("
0 0 14 3 19 #"primitive-pred-list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 18 #"list-pred-bool-exp"
0 0 24 3 2 #") "
0 0 17 3 6 #";list?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"expr-bool"
0 0 24 3 2 #" ("
0 0 14 3 21 #"primitive-pred-record"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 4 #" )  "
0 0 14 3 20 #"record-pred-bool-exp"
0 0 24 3 2 #") "
0 0 17 3 8 #";record?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"expr-bool"
0 0 24 3 2 #" ("
0 0 14 3 14 #"primitive-null"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 18 #"null-pred-bool-exp"
0 0 24 3 3 #" ) "
0 0 17 3 42 #"; null list?, null record?, null vector?  "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"expr-bool"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"{\""
0 0 24 3 1 #" "
0 0 14 3 7 #"boolean"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"}\""
0 0 24 3 2 #") "
0 0 14 3 15 #"simple-bool-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"expr-bool"
0 0 24 3 2 #" ("
0 0 14 3 11 #"oper-a-bool"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 9 #"expr-bool"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 10 #"oper-a-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ( "
0 0 19 3 10 #"\"sequence\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 12 #"sequence-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ( "
0 0 19 3 4 #"\"if\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 9 #"expr-bool"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"then\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"}\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"else\""
0 0 24 3 2 #"  "
0 0 19 3 3 #"\"{\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"}\""
0 0 24 3 2 #") "
0 0 14 3 6 #"if-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ( "
0 0 19 3 6 #"\"cond\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"[\""
0 0 24 3 1 #" "
0 0 14 3 9 #"expr-bool"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"]\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ) "
0 0 19 3 6 #"\"else\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ) "
0 0 14 3 8 #"cond-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ( "
0 0 19 3 5 #"\"for\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 24 3 1 #" "
0 0 14 3 14 #"decr-incre-exp"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"}\""
0 0 24 3 2 #") "
0 0 14 3 7 #"for-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 14 #"decr-incre-exp"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"to\""
0 0 24 3 2 #") "
0 0 14 3 6 #"to-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 14 #"decr-incre-exp"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"downto\""
0 0 24 3 2 #") "
0 0 14 3 10 #"downto-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 33 #";numbers' or octals' expressions."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 9 #"primitive"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 15 #"primapp-bin-exp"
0 0 24 3 2 #") "
0 0 17 3 31 #";arimetic primitives -> infixed"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 12 #"primitive-un"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 14 #"primapp-un-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 22 #";strings' expressions."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 20 #"primitive-bin-string"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 18 #"primapp-bin-string"
0 0 24 3 2 #") "
0 0 17 3 9 #";concat  "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 19 #"primitive-un-string"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 21 #"primapp-un-string-exp"
0 0 24 3 2 #") "
0 0 17 3 7 #";length"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 20 #";lists' expressions."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 17 #"primitive-un-list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #"("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 19 #"primapp-un-list-exp"
0 0 24 3 2 #") "
0 0 17 3 17 #"; top, pop, null?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 24 #"primitive-un-create-list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 3 #" ) "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 19 #"primapp-create-list"
0 0 24 3 2 #") "
0 0 17 3 12 #";create-list"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 18 #"primitive-bin-list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 20 #"primapp-bin-list-exp"
0 0 24 3 2 #") "
0 0 17 3 7 #";append"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 22 #";vectors' expressions."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 20 #"primitive-bin-vector"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 17 #"primapp-un-vector"
0 0 24 3 2 #") "
0 0 17 3 25 #";ref-vector, set-vector. "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 23 #"primitive-create-vector"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 21 #"primapp-create-vector"
0 0 24 3 2 #") "
0 0 17 3 15 #";create vector."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 22 #";records' expressions."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 20 #"primitive-bin-record"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 18 #"primapp-bin-record"
0 0 24 3 2 #") "
0 0 17 3 24 #";set-record, ref-record."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 26 #"primitive-un-create-record"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"}\""
0 0 24 3 2 #") "
0 0 14 3 21 #"primapp-create-record"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 34 #";arimetic primitives are infixed. "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"+\""
0 0 24 3 2 #") "
0 0 14 3 8 #"add-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"-\""
0 0 24 3 2 #") "
0 0 14 3 8 #"sub-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"*\""
0 0 24 3 2 #") "
0 0 14 3 9 #"mult-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"%\""
0 0 24 3 2 #") "
0 0 14 3 8 #"mod-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"/\""
0 0 24 3 2 #") "
0 0 14 3 8 #"div-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"primitive-un"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"++\""
0 0 24 3 2 #") "
0 0 14 3 9 #"add1-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"primitive-un"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"--\""
0 0 24 3 2 #") "
0 0 14 3 9 #"sub1-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 19 #"primitive-un-string"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"length\""
0 0 24 3 2 #") "
0 0 14 3 11 #"length-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 20 #"primitive-bin-string"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"concat\""
0 0 24 3 2 #") "
0 0 14 3 11 #"concat-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 6 #";lists"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 17 #"primitive-un-list"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"top\""
0 0 24 3 2 #") "
0 0 14 3 14 #"head-list-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 17 #"primitive-un-list"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"pop\""
0 0 24 3 2 #") "
0 0 14 3 14 #"tail-list-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 19 #"primitive-pred-list"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"list?\""
0 0 24 3 2 #") "
0 0 14 3 16 #"pred-islist-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 18 #"primitive-bin-list"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"append\""
0 0 24 3 2 #") "
0 0 14 3 16 #"append-list-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 24 #"primitive-un-create-list"
0 0 24 3 2 #" ("
0 0 19 3 13 #"\"create-list\""
0 0 24 3 2 #") "
0 0 14 3 16 #"create-list-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 8 #";vectors"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 20 #"primitive-bin-vector"
0 0 24 3 2 #" ("
0 0 19 3 12 #"\"ref-vector\""
0 0 24 3 2 #") "
0 0 14 3 15 #"ref-vector-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 20 #"primitive-bin-vector"
0 0 24 3 2 #" ("
0 0 19 3 12 #"\"set-vector\""
0 0 24 3 2 #") "
0 0 14 3 15 #"set-vector-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 21 #"primitive-pred-vector"
0 0 24 3 2 #" ("
0 0 19 3 9 #"\"vector?\""
0 0 24 3 2 #") "
0 0 14 3 18 #"pred-isvector-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 23 #"primitive-create-vector"
0 0 24 3 2 #" ("
0 0 19 3 15 #"\"create-vector\""
0 0 24 3 2 #") "
0 0 14 3 18 #"create-vector-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 8 #";records"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 21 #"primitive-pred-record"
0 0 24 3 2 #" ("
0 0 19 3 9 #"\"record?\""
0 0 24 3 2 #") "
0 0 14 3 18 #"pred-isrecord-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 26 #"primitive-un-create-record"
0 0 24 3 2 #" ("
0 0 19 3 15 #"\"create-record\""
0 0 24 3 2 #") "
0 0 14 3 18 #"record-create-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 20 #"primitive-bin-record"
0 0 24 3 2 #" ("
0 0 19 3 12 #"\"ref-record\""
0 0 24 3 2 #") "
0 0 14 3 15 #"ref-record-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 20 #"primitive-bin-record"
0 0 24 3 2 #" ("
0 0 19 3 12 #"\"set-record\""
0 0 24 3 2 #") "
0 0 14 3 15 #"set-record-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 20 #";logical expressions"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"pred-prim"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"<\""
0 0 24 3 2 #") "
0 0 14 3 9 #"less-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"pred-prim"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\">\""
0 0 24 3 2 #") "
0 0 14 3 12 #"greater-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"pred-prim"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"<=\""
0 0 24 3 2 #") "
0 0 14 3 15 #"less-equal-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"pred-prim"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\">=\""
0 0 24 3 2 #") "
0 0 14 3 18 #"greater-equal-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"pred-prim"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"==\""
0 0 24 3 2 #") "
0 0 14 3 10 #"equal-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"pred-prim"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"<>\""
0 0 24 3 2 #") "
0 0 14 3 14 #"different-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"oper-bin-bool"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"and\""
0 0 24 3 2 #") "
0 0 14 3 8 #"and-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"oper-bin-bool"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"or\""
0 0 24 3 2 #") "
0 0 14 3 7 #"or-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"oper-bin-bool"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"xor\""
0 0 24 3 2 #") "
0 0 14 3 8 #"xor-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"oper-a-bool"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"not\""
0 0 24 3 2 #") "
0 0 14 3 8 #"not-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 10 #";null-prim"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 14 #"primitive-null"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"null?\""
0 0 24 3 2 #") "
0 0 14 3 14 #"pred-null-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 28 #"sllgen:make-define-datatypes"
0 0 24 3 1 #" "
0 0 14 3 6 #"lexica"
0 0 24 3 1 #" "
0 0 14 3 9 #"gramatica"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"show-the-datatypes"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 5 #" () ("
0 0 14 3 28 #"sllgen:list-define-datatypes"
0 0 24 3 1 #" "
0 0 14 3 6 #"lexica"
0 0 24 3 1 #" "
0 0 14 3 9 #"gramatica"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 92
(4
 #";********************************************************************"
 #"***********************"
) 0 0 24 29 1 #"\n"
0 0 17 3 26 #";Parser, Scanner, Interfaz"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(5
 #";El FrontEnd (An\xC3\xA1lisis l\xC3\xA9xico (scanner) y sint\xC3\xA1c"
 #"tico (parser) integrados)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"scan&parse"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 25 #"sllgen:make-string-parser"
0 0 24 3 1 #" "
0 0 14 3 6 #"lexica"
0 0 24 3 1 #" "
0 0 14 3 9 #"gramatica"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";El Analizador L\303\251xico (Scanner)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"just-scan"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 26 #"sllgen:make-string-scanner"
0 0 24 3 1 #" "
0 0 14 3 6 #"lexica"
0 0 24 3 1 #" "
0 0 14 3 9 #"gramatica"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0

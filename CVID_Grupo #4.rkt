#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.9 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mrl"
 #"ib\"))\x00"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-snip"
 #"class-wxme.ss\" \"framework\"))\x00"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsis"
 #"-snip-wxme.rkt\" \"drracket\" \"private\"))\x00"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.rk"
 #"t\" \"drracket\" \"private\"))\x00"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 125 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 18 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 36 36 140 255 255 255 -1
-1 0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 34 139 34 255 255 255 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 18 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 36 36 140
255 255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 34 139 34
255 255 255 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 15 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 1 #"\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 32 #"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 73 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 190 190 190
0 0 0 -1 -1 72 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 107 142 35 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 100 149 237
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 70 130 180 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 47 79 79 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 139 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 75 0 130 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 160 32 240 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 250 128 114
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 184 134 11 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 128 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 169 169 169
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 0 0 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 0 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 255 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 255 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 107 142 35
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 100 0 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 100 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 139 0 0 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 139 0 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 100 149 237
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 65 105 225
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 65 105 225
255 228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 70 130 180
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 70 130 180
255 228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 47 79 79 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 139 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 139 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 75 0 130 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 75 0 130 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 160 32 240
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 250 128 114
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 184 134 11
224 255 255 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 16 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1           0 1650 0 28 3 10 #"#lang eopl"
0 0 24 29 1 #"\n"
0 9          37 21           0 0           0 5 0 17 3 44
#";;Diego Fabi\303\241n Ledesma Motta   1928161-3743"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";;Jos\303\251 David Barona            1727590-3743"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";;Juan Camilo Randazzo         1923948-3743"
0           0 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"lexica"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 24 3 3 #"( ("
0 0 14 3 8 #"white-sp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"whitespace"
0 0 24 3 2 #") "
0 0 14 3 4 #"skip"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"comment"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 19 3 4 #"\"//\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 21 3 9 #"#\\newline"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"skip"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"comment"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 19 3 4 #"\"/*\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 3 #"any"
0 0 24 3 2 #") "
0 0 19 3 4 #"\"*/\""
0 0 24 3 2 #") "
0 0 14 3 4 #"skip"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"identifier"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"letter"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 6 #"letter"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"_\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"?\""
0 0 24 3 4 #"))) "
0 0 14 3 6 #"symbol"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"string"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"$\""
0 0 24 3 3 #"  ("
0 0 14 3 5 #"arbno"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\$"
0 0 24 3 4 #") ) "
0 0 19 3 3 #"\"$\""
0 0 24 3 3 #" ) "
0 0 14 3 6 #"string"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"character"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"'\""
0 0 24 3 1 #" "
0 0 14 3 3 #"any"
0 0 24 3 1 #" "
0 0 14 3 10 #"whitespace"
0 0 24 3 2 #") "
0 0 14 3 6 #"string"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"boolean"
0 0 24 3 3 #" ( "
0 0 19 3 3 #"\"#\""
0 0 24 3 1 #"("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"true\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"false\""
0 0 24 3 4 #") ) "
0 0 14 3 6 #"string"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"number"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 3 #")) "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"number"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 3 #")) "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"number"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #") "
0 0 19 3 3 #"\".\""
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 3 #")) "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"number"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #") "
0 0 19 3 3 #"\".\""
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 3 #")) "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"retornarString"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"substring"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #"("
0 0 14 3 13 #"string-length"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 21 3 1 #"1"
0 0 24 3 3 #") )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"retornarCaracter"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"char"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"substring"
0 0 24 3 1 #" "
0 0 14 3 4 #"char"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"gramatica"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 8 #"programa"
0 0 24 3 2 #" ("
0 0 14 3 6 #"global"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"endGlobal\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 9 #"a-program"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"global"
0 0 24 3 3 #" ( "
0 0 19 3 3 #"\"{\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 2 #"  "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #"  "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"}\""
0 0 24 3 3 #" ) "
0 0 14 3 10 #"exp-global"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 10 #";variables"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ( "
0 0 19 3 5 #"\"var\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"}\""
0 0 24 3 2 #"  "
0 0 19 3 3 #"\";\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 7 #"var-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ( "
0 0 19 3 7 #"\"const\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"}\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 9 #"const-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ( "
0 0 19 3 5 #"\"rec\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"}\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 7 #"rec-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ( "
0 0 19 3 6 #"\"unic\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"}\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 8 #"unic-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 16 #";data varieties."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 10 #"identifier"
0 0 24 3 2 #") "
0 0 14 3 14 #"identifier-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 6 #"number"
0 0 24 3 2 #") "
0 0 14 3 10 #"number-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 9 #"character"
0 0 24 3 2 #") "
0 0 14 3 13 #"character-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 6 #"string"
0 0 24 3 2 #") "
0 0 14 3 10 #"string-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 7 #"boolean"
0 0 24 3 2 #") "
0 0 14 3 11 #"boolean-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"allot\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"<-\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 9 #"allot-exp"
0 0 24 3 3 #")  "
0 0 17 3 33 #";assignate a value to a constant."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ( "
0 0 19 3 4 #"\"x8\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #" ) "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 9 #"octal-exp"
0 0 24 3 3 #")  "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ( "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 8 #"list-exp"
0 0 24 3 2 #") "
0 0 17 3 53 #";it can also be used as the constructor of null list."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ( "
0 0 19 3 6 #"\"cons\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #"  "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 8 #"cons-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"func\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 3 #" ) "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"}\""
0 0 24 3 2 #") "
0 0 14 3 8 #"func-exp"
0 0 24 3 2 #") "
0 0 17 3 10 #";functions"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"call\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"->\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 3 #")  "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 8 #"call-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"map\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 7 #"map-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"filter\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 10 #"filter-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"maxVal\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 10 #"maxVal-exp"
0 0 24 3 2 #") "
0 0 17 3 15 #";list or vector"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"minVal\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 10 #"minVal-exp"
0 0 24 3 2 #") "
0 0 17 3 15 #";list or vector"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"n-root\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 10 #"n-root-exp"
0 0 24 3 2 #") "
0 0 17 3 58
#";nth-root first argument number base and second one root. "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 11 #"\"power-nth\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 9 #"power-exp"
0 0 24 3 2 #") "
0 0 17 3 56 #";first argument number base and second one is the power."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ( "
0 0 19 3 8 #"\"vector\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"[\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 3 #" ) "
0 0 19 3 3 #"\"]\""
0 0 24 3 3 #" ) "
0 0 14 3 10 #"vector-exp"
0 0 24 3 2 #") "
0 0 17 3 56 #"; it can also be used as the constructor of null vector."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"record\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 3 #")  "
0 0 19 3 3 #"\"}\""
0 0 24 3 2 #") "
0 0 14 3 10 #"record-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 9 #"expr-bool"
0 0 24 3 2 #") "
0 0 14 3 8 #"bool-exp"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"expr-bool"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pred-prim"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 16 #"compare-bool-exp"
0 0 24 3 2 #") "
0 0 17 3 35 #"; pred-prim: <, >, <=, >= , == , <>"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"expr-bool"
0 0 24 3 3 #" ( "
0 0 14 3 13 #"oper-bin-bool"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 9 #"expr-bool"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #" "
0 0 14 3 9 #"expr-bool"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #" "
0 0 14 3 9 #"expr-bool"
0 0 24 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 17 #"oper-bin-bool-exp"
0 0 24 3 2 #") "
0 0 17 3 13 #";and, or, xor"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"expr-bool"
0 0 24 3 2 #" ("
0 0 14 3 21 #"primitive-pred-vector"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 20 #"vector-pred-bool-exp"
0 0 24 3 2 #") "
0 0 17 3 8 #";vector?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"expr-bool"
0 0 24 3 2 #" ("
0 0 14 3 19 #"primitive-pred-list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 18 #"list-pred-bool-exp"
0 0 24 3 2 #") "
0 0 17 3 27 #";primitive-pred-list: list?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"expr-bool"
0 0 24 3 2 #" ("
0 0 14 3 21 #"primitive-pred-record"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 4 #" )  "
0 0 14 3 20 #"record-pred-bool-exp"
0 0 24 3 2 #") "
0 0 17 3 31 #";primitive-pred-record: record?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"expr-bool"
0 0 24 3 2 #" ("
0 0 14 3 14 #"primitive-null"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 18 #"null-pred-bool-exp"
0 0 24 3 3 #" ) "
0 0 17 3 62
#";primitive-null: null? (used for vectors, records and lists)  "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"expr-bool"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"{\""
0 0 24 3 1 #" "
0 0 14 3 7 #"boolean"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"}\""
0 0 24 3 2 #") "
0 0 14 3 15 #"simple-bool-exp"
0 0 24 3 2 #") "
0 0 17 3 33 #";booleans for expr-bool datatype."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"expr-bool"
0 0 24 3 2 #" ("
0 0 14 3 11 #"oper-a-bool"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 10 #"oper-a-exp"
0 0 24 3 2 #") "
0 0 17 3 17 #";not, even?, odd?"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ( "
0 0 19 3 10 #"\"sequence\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 12 #"sequence-exp"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 25 #";Control flow expressions"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ( "
0 0 19 3 4 #"\"if\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"then\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"}\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"else\""
0 0 24 3 2 #"  "
0 0 19 3 3 #"\"{\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"}\""
0 0 24 3 2 #") "
0 0 14 3 6 #"if-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ( "
0 0 19 3 6 #"\"cond\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"[\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"]\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 19 3 6 #"\"else\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 8 #"cond-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ( "
0 0 19 3 5 #"\"for\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 24 3 1 #" "
0 0 14 3 14 #"decr-incre-exp"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"}\""
0 0 24 3 2 #") "
0 0 14 3 7 #"for-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"while\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"do\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"}\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"done\""
0 0 24 3 2 #") "
0 0 14 3 9 #"while-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"print\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 9 #"print-exp"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 14 #"decr-incre-exp"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"to\""
0 0 24 3 2 #") "
0 0 14 3 6 #"to-exp"
0 0 24 3 2 #") "
0 0 17 3 16 #";used in for-exp"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 14 #"decr-incre-exp"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"downto\""
0 0 24 3 2 #") "
0 0 14 3 10 #"downto-exp"
0 0 24 3 2 #") "
0 0 17 3 16 #";used in for-exp"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 33 #";numbers' or octals' expressions."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"[\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 9 #"primitive"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"]\""
0 0 24 3 3 #" ) "
0 0 14 3 15 #"primapp-bin-exp"
0 0 24 3 2 #") "
0 0 17 3 31 #";arimetic primitives -> infixed"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 12 #"primitive-un"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 14 #"primapp-un-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 22 #";strings' expressions."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 20 #"primitive-bin-string"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 18 #"primapp-bin-string"
0 0 24 3 2 #") "
0 0 17 3 9 #";concat  "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 19 #"primitive-un-length"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 21 #"primapp-un-length-exp"
0 0 24 3 2 #") "
0 0 17 3 35 #";length (string, lists and vectors)"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 20 #";lists' expressions."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 17 #"primitive-un-list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 19 #"primapp-un-list-exp"
0 0 24 3 2 #") "
0 0 17 3 10 #"; top, pop"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 24 #"primitive-un-create-list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 3 #" ) "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 19 #"primapp-create-list"
0 0 24 3 2 #") "
0 0 17 3 12 #";create-list"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 18 #"primitive-bin-list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 20 #"primapp-bin-list-exp"
0 0 24 3 2 #") "
0 0 17 3 7 #";append"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 22 #";vectors' expressions."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 24 #"primitive-bin-set-vector"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 22 #"primapp-bin-set-vector"
0 0 24 3 2 #") "
0 0 17 3 11 #";set-vector"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 24 #"primitive-bin-ref-vector"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 2 #"  "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 22 #"primapp-bin-ref-vector"
0 0 24 3 2 #") "
0 0 17 3 12 #";ref-vector "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 23 #"primitive-create-vector"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"[\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 2 #") "
0 0 19 3 3 #"\"]\""
0 0 24 3 3 #" ) "
0 0 14 3 21 #"primapp-create-vector"
0 0 24 3 2 #") "
0 0 17 3 15 #";create vector."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 22 #";records' expressions."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 24 #"primitive-bin-ref-record"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 2 #"  "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 22 #"primapp-bin-ref-record"
0 0 24 3 2 #") "
0 0 17 3 12 #";ref-record."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 24 #"primitive-bin-set-record"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 2 #"  "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 22 #"primapp-bin-set-record"
0 0 24 3 2 #") "
0 0 17 3 12 #";set-record."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 26 #"primitive-un-create-record"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"}\""
0 0 24 3 2 #") "
0 0 14 3 21 #"primapp-create-record"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 34 #";arimetic primitives are infixed. "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"+\""
0 0 24 3 2 #") "
0 0 14 3 8 #"add-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"~\""
0 0 24 3 2 #") "
0 0 14 3 8 #"sub-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"*\""
0 0 24 3 2 #") "
0 0 14 3 9 #"mult-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"%\""
0 0 24 3 2 #") "
0 0 14 3 8 #"mod-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"/\""
0 0 24 3 2 #") "
0 0 14 3 8 #"div-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"primitive-un"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"++\""
0 0 24 3 2 #") "
0 0 14 3 9 #"add1-prim"
0 0 24 3 2 #") "
0 0 17 3 36 #";only for lists, vectors and numbers"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"primitive-un"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"--\""
0 0 24 3 2 #") "
0 0 14 3 9 #"sub1-prim"
0 0 24 3 2 #") "
0 0 17 3 36 #";only for lists, vectors and numbers"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 18 #";string primitives"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 19 #"primitive-un-length"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"length\""
0 0 24 3 2 #") "
0 0 14 3 11 #"length-prim"
0 0 24 3 2 #") "
0 0 17 3 46 #";it can be used for strings, lists and vectors"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 20 #"primitive-bin-string"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"concat\""
0 0 24 3 2 #") "
0 0 14 3 11 #"concat-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 6 #";lists"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 17 #"primitive-un-list"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"top\""
0 0 24 3 2 #") "
0 0 14 3 14 #"head-list-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 17 #"primitive-un-list"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"pop\""
0 0 24 3 2 #") "
0 0 14 3 14 #"tail-list-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 19 #"primitive-pred-list"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"list?\""
0 0 24 3 2 #") "
0 0 14 3 16 #"pred-islist-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 18 #"primitive-bin-list"
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"append\""
0 0 24 3 2 #") "
0 0 14 3 16 #"append-list-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 24 #"primitive-un-create-list"
0 0 24 3 2 #" ("
0 0 19 3 13 #"\"create-list\""
0 0 24 3 2 #") "
0 0 14 3 16 #"create-list-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 8 #";vectors"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 24 #"primitive-bin-ref-vector"
0 0 24 3 2 #" ("
0 0 19 3 12 #"\"ref-vector\""
0 0 24 3 2 #") "
0 0 14 3 15 #"ref-vector-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 24 #"primitive-bin-set-vector"
0 0 24 3 2 #" ("
0 0 19 3 12 #"\"set-vector\""
0 0 24 3 2 #") "
0 0 14 3 15 #"set-vector-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 21 #"primitive-pred-vector"
0 0 24 3 2 #" ("
0 0 19 3 9 #"\"vector?\""
0 0 24 3 2 #") "
0 0 14 3 18 #"pred-isvector-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 23 #"primitive-create-vector"
0 0 24 3 2 #" ("
0 0 19 3 15 #"\"create-vector\""
0 0 24 3 2 #") "
0 0 14 3 18 #"create-vector-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 8 #";records"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 21 #"primitive-pred-record"
0 0 24 3 2 #" ("
0 0 19 3 9 #"\"record?\""
0 0 24 3 2 #") "
0 0 14 3 18 #"pred-isrecord-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 26 #"primitive-un-create-record"
0 0 24 3 2 #" ("
0 0 19 3 15 #"\"create-record\""
0 0 24 3 2 #") "
0 0 14 3 18 #"record-create-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 24 #"primitive-bin-ref-record"
0 0 24 3 2 #" ("
0 0 19 3 12 #"\"ref-record\""
0 0 24 3 2 #") "
0 0 14 3 15 #"ref-record-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 24 #"primitive-bin-set-record"
0 0 24 3 2 #" ("
0 0 19 3 12 #"\"set-record\""
0 0 24 3 2 #") "
0 0 14 3 15 #"set-record-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 20 #";logical expressions"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"pred-prim"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"<\""
0 0 24 3 2 #") "
0 0 14 3 9 #"less-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"pred-prim"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\">\""
0 0 24 3 2 #") "
0 0 14 3 12 #"greater-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"pred-prim"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"<=\""
0 0 24 3 2 #") "
0 0 14 3 15 #"less-equal-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"pred-prim"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\">=\""
0 0 24 3 2 #") "
0 0 14 3 18 #"greater-equal-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"pred-prim"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"==\""
0 0 24 3 2 #") "
0 0 14 3 10 #"equal-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"pred-prim"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"<>\""
0 0 24 3 2 #") "
0 0 14 3 14 #"different-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"oper-bin-bool"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"and\""
0 0 24 3 2 #") "
0 0 14 3 8 #"and-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"oper-bin-bool"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"or\""
0 0 24 3 2 #") "
0 0 14 3 7 #"or-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"oper-bin-bool"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"xor\""
0 0 24 3 2 #") "
0 0 14 3 8 #"xor-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"oper-a-bool"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"not\""
0 0 24 3 2 #") "
0 0 14 3 8 #"not-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"oper-a-bool"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"even?\""
0 0 24 3 2 #") "
0 0 14 3 14 #"even-bool-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"oper-a-bool"
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"odd?\""
0 0 24 3 2 #") "
0 0 14 3 13 #"odd-bool-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 10 #";null-prim"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 14 #"primitive-null"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"null?\""
0 0 24 3 2 #") "
0 0 14 3 14 #"pred-null-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 28 #"sllgen:make-define-datatypes"
0 0 24 3 1 #" "
0 0 14 3 6 #"lexica"
0 0 24 3 1 #" "
0 0 14 3 9 #"gramatica"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"show-the-datatypes"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 5 #" () ("
0 0 14 3 28 #"sllgen:list-define-datatypes"
0 0 24 3 1 #" "
0 0 14 3 6 #"lexica"
0 0 24 3 1 #" "
0 0 14 3 9 #"gramatica"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 92
(4
 #";********************************************************************"
 #"***********************"
) 0 0 24 29 1 #"\n"
0 0 17 3 26 #";Parser, Scanner, Interfaz"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(5
 #";El FrontEnd (An\xC3\xA1lisis l\xC3\xA9xico (scanner) y sint\xC3\xA1c"
 #"tico (parser) integrados)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"scan&parse"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 25 #"sllgen:make-string-parser"
0 0 24 3 1 #" "
0 0 14 3 6 #"lexica"
0 0 24 3 1 #" "
0 0 14 3 9 #"gramatica"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";El Analizador L\303\251xico (Scanner)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"just-scan"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 26 #"sllgen:make-string-scanner"
0 0 24 3 1 #" "
0 0 14 3 6 #"lexica"
0 0 24 3 1 #" "
0 0 14 3 9 #"gramatica"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 99
(6
 #";************************************LEXICA**************************"
 #"******************************"
) 0 0 24 29 1 #"\n"
0 9       31903 21           0 0           0 5316 0 24 29 1 #"\n"
0 0 17 3 15 #";Factorial list"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"{} "
0 0 14 3 9 #"endGlobal"
0 0 24 29 1 #"\n"
0 0 15 3 3 #"rec"
0 0 24 3 2 #" {"
0 0 24 29 1 #"\n"
0 0 14 3 1 #"c"
0 0 24 3 3 #"() "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 28 3 1 #","
0 0 24 29 1 #"\n"
0 0 14 3 9 #"factorial"
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 2 #"=="
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 28 3 1 #","
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 28 3 1 #","
0 0 14 3 2 #"=="
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 28 3 1 #","
0 0 21 3 1 #"1"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"then"
0 0 24 3 2 #" {"
0 0 21 3 1 #"1"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 14 3 4 #"else"
0 0 24 3 3 #" {["
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 4 #"call"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"factorial"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ["
0 0 14 3 3 #"x+1"
0 0 24 3 6 #"])  ]}"
0 0 28 3 1 #","
0 0 24 29 1 #"\n"
0 0 14 3 14 #"list_factorial"
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"=="
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 28 3 1 #","
0 0 14 3 1 #"c"
0 0 24 3 4 #") ) "
0 0 14 3 4 #"then"
0 0 24 3 2 #" {"
0 0 14 3 4 #"call"
0 0 24 3 2 #" ("
0 0 14 3 9 #"factorial"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #")}"
0 0 24 29 1 #"\n"
0 0 14 3 4 #"else"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"call"
0 0 24 3 2 #" ("
0 0 14 3 9 #"factorial"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 14 3 4 #"call"
0 0 24 3 2 #" ("
0 0 14 3 14 #"list_factorial"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 2 #" ["
0 0 14 3 3 #"c+1"
0 0 24 3 5 #"]))}}"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 14 3 4 #"call"
0 0 24 3 2 #" ("
0 0 14 3 14 #"list_factorial"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";Filter function"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"{} "
0 0 14 3 9 #"endGlobal"
0 0 24 29 1 #"\n"
0 0 15 3 3 #"rec"
0 0 24 3 2 #" {"
0 0 24 29 1 #"\n"
0 0 14 3 6 #"filtro"
0 0 24 3 1 #"("
0 0 14 3 3 #"lst"
0 0 28 3 1 #","
0 0 14 3 4 #"pred"
0 0 24 3 2 #") "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lst"
0 0 24 3 3 #")) "
0 0 14 3 4 #"then"
0 0 24 3 5 #" {()}"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 4 #"else"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 14 3 2 #"if"
0 0 24 3 3 #" ( "
0 0 14 3 4 #"call"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pred"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"top"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lst"
0 0 24 3 5 #")) ) "
0 0 14 3 4 #"then"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              { "
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"top"
0 0 24 3 1 #"("
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 4 #"call"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filtro"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"pop"
0 0 24 3 1 #"("
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 4 #"pred"
0 0 24 3 5 #")) } "
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               {"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 4 #"call"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filtro"
0 0 24 3 1 #" "
0 0 14 3 2 #"->"
0 0 24 3 1 #" "
0 0 14 3 3 #"pop"
0 0 24 3 1 #"("
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 4 #"pred"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                }"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           }"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     }"
0 0 17 3 50 #"; call (filtro -> (1,2,3,4,5) func(x) {even? (x)})"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 2 #"1."
0 0 24 3 1 #" "
0 0 17 3 11 #";Whitespace"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 9 #"just-scan"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"  \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 2 #"2."
0 0 24 3 1 #" "
0 0 17 3 11 #";Comment //"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 9 #"just-scan"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"  "
0 0 19 3 6 #"//This"
0 0 19 3 1 #" "
0 0 19 3 2 #"is"
0 0 19 3 11 #" a comment\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 2 #"3."
0 0 24 3 1 #" "
0 0 17 3 14 #";Comment /* */"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 9 #"just-scan"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"   "
0 0 19 3 5 #"/*All"
0 0 19 3 1 #" "
0 0 19 3 4 #"this"
0 0 19 29 1 #"\n"
0 0 19 3 18 #"                  "
0 0 19 3 5 #"lines"
0 0 19 29 1 #"\n"
0 0 19 3 18 #"                  "
0 0 19 3 3 #"are"
0 0 19 29 1 #"\n"
0 0 19 3 29 #"                  comments*/\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 2 #"4."
0 0 24 3 1 #" "
0 0 17 3 11 #";identifier"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 9 #"just-scan"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"identif_?\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" (("
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 14 3 9 #"identif_?"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 2 #"5."
0 0 24 3 1 #" "
0 0 17 3 7 #";string"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 9 #"just-scan"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"$This"
0 0 19 3 1 #" "
0 0 19 3 2 #"is"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 29 1 #"\n"
0 0 19 3 9 #" string$\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" (("
0 0 14 3 6 #"string"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"$This"
0 0 19 3 15 #" is a\\nstring$\""
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 2 #"6."
0 0 24 3 1 #" "
0 0 17 3 73
(7
 #";character (\"'c\" da error, ya que no incluye el espacio tras el car"
 #"acter)"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 9 #"just-scan"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"'c \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" (("
0 0 14 3 9 #"character"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"'c \""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 2 #"7."
0 0 24 3 1 #" "
0 0 17 3 8 #";boolean"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 9 #"just-scan"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"#true"
0 0 19 29 1 #"\n"
0 0 19 3 9 #"  #false\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" (("
0 0 14 3 7 #"boolean"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"boolean"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"#false\""
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 2 #"8."
0 0 24 3 1 #" "
0 0 17 3 17 #";number (integer)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 9 #"just-scan"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #"0"
0 0 19 3 8 #" 5 1954\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"Answer:"
0 0 24 3 3 #" (("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 4 #"1954"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 2 #"9."
0 0 24 3 1 #" "
0 0 17 3 24 #";number negative integer"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 9 #"just-scan"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"-0"
0 0 19 3 10 #" -5 -1954\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"Answer:"
0 0 24 3 3 #" (("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 2 #"-5"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 5 #"-1954"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"10."
0 0 24 3 1 #" "
0 0 17 3 21 #";number (non-integer)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 9 #"just-scan"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"0.0"
0 0 19 3 17 #" 5.2 1954.129854\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"Answer:"
0 0 24 3 3 #" (("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 3 #"5.2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 11 #"1954.129854"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"11."
0 0 24 3 1 #" "
0 0 17 3 30 #";number (negative non-integer)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 9 #"just-scan"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"-0.0"
0 0 19 3 19 #" -5.2 -1954.129854\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"Answer:"
0 0 24 3 3 #" (("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 4 #"-0.0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 4 #"-5.2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 12 #"-1954.129854"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 105
(8
 #";**********************************************GRAM\xC3\x81TICA******"
 #"******************************************"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 2 #"1."
0 0 24 3 1 #" "
0 0 17 3 22 #";a-program, exp-global"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 15 #"{} endGlobal 0\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 10 #" () ()) #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 2 #"2."
0 0 24 3 1 #" "
0 0 17 3 8 #";var-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #"{"
0 0 19 3 8 #"globalId"
0 0 19 3 1 #" "
0 0 19 3 58
#"= var {}; -2} endGlobal var {id1 = -0.0, id2 = 'm }; 1.53\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 2 #" ("
0 0 14 3 8 #"globalId"
0 0 24 3 5 #") (#("
0 0 14 3 14 #"struct:var-exp"
0 0 24 3 9 #" () () #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"-2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   #("
0 0 14 3 14 #"struct:var-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"id1"
0 0 24 3 1 #" "
0 0 14 3 3 #"id2"
0 0 24 3 5 #") (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 4 #"-0.0"
0 0 24 3 4 #") #("
0 0 14 3 20 #"struct:character-exp"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"'m \""
0 0 24 3 5 #")) #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 4 #"1.53"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 2 #"3."
0 0 24 3 1 #" "
0 0 17 3 10 #";const-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 96
(9
 #"\"{globalId = const {}; -180.59594} endGlobal const {id1 = $this is a"
 #" string$, id2 = #false }; 1\""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 2 #" ("
0 0 14 3 8 #"globalId"
0 0 24 3 5 #") (#("
0 0 14 3 16 #"struct:const-exp"
0 0 24 3 9 #" () () #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 10 #"-180.59594"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   #("
0 0 14 3 16 #"struct:const-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"id1"
0 0 24 3 1 #" "
0 0 14 3 3 #"id2"
0 0 24 3 5 #") (#("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"$this is a string$\""
0 0 24 3 4 #") #("
0 0 14 3 18 #"struct:boolean-exp"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"#false\""
0 0 24 3 5 #")) #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 2 #"4."
0 0 24 3 1 #" "
0 0 17 3 8 #";rec-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 61
#"\"{} endGlobal rec {id1 (sub, aux, c) = allot c <- aux }; 'r \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 8 #"answer:#"
0 0 24 3 1 #"("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   #("
0 0 14 3 14 #"struct:rec-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"id1"
0 0 24 3 4 #") (("
0 0 14 3 3 #"sub"
0 0 24 3 1 #" "
0 0 14 3 3 #"aux"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 6 #")) (#("
0 0 14 3 16 #"struct:allot-exp"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #" #("
0 0 14 3 21 #"struct:identifier-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"aux"
0 0 24 3 6 #"))) #("
0 0 14 3 20 #"struct:character-exp"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"'r \""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 2 #"5."
0 0 24 3 1 #" "
0 0 17 3 9 #";unic-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 84
(10
 #"\"{globalId = unic {}; -180.59594} endGlobal unic {idUnic1 = 5, idUni"
 #"c2 = #true }; 1\""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 2 #" ("
0 0 14 3 8 #"globalId"
0 0 24 3 5 #") (#("
0 0 14 3 15 #"struct:unic-exp"
0 0 24 3 9 #" () () #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 10 #"-180.59594"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   #("
0 0 14 3 15 #"struct:unic-exp"
0 0 24 3 2 #" ("
0 0 14 3 7 #"idUnic1"
0 0 24 3 1 #" "
0 0 14 3 7 #"idUnic2"
0 0 24 3 5 #") (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #") #("
0 0 14 3 18 #"struct:boolean-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 5 #")) #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 2 #"6."
0 0 24 3 1 #" "
0 0 17 3 15 #";identifier-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 54 #"\"{globalId1 = id1, globalId2 = idG_2} endGlobal id_3?\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"globalId1"
0 0 24 3 1 #" "
0 0 14 3 9 #"globalId2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    (#("
0 0 14 3 21 #"struct:identifier-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"id1"
0 0 24 3 4 #") #("
0 0 14 3 21 #"struct:identifier-exp"
0 0 24 3 1 #" "
0 0 14 3 5 #"idG_2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 21 #"struct:identifier-exp"
0 0 24 3 1 #" "
0 0 14 3 5 #"id_3?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 2 #"7."
0 0 24 3 1 #" "
0 0 17 3 11 #";number-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 55 #"\"{globalId1 = 3, globalId2 = -4321} endGlobal -779.543\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 2 #" ("
0 0 14 3 9 #"globalId1"
0 0 24 3 1 #" "
0 0 14 3 9 #"globalId2"
0 0 24 3 5 #") (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 5 #"-4321"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 8 #"-779.543"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 2 #"8."
0 0 24 3 1 #" "
0 0 17 3 14 #";character-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 51 #"\"{globalId1 = 'a , globalId2 = '$ } endGlobal '|  \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 3 #"Not"
0 0 24 3 1 #" "
0 0 14 3 8 #"accepted"
0 0 24 3 1 #" "
0 0 14 3 2 #"as"
0 0 24 3 1 #" "
0 0 14 3 10 #"character:"
0 0 24 3 1 #" "
0 0 14 3 2 #"\\,"
0 0 24 3 1 #" "
0 0 14 3 5 #"\\<any"
0 0 24 3 1 #" "
0 0 14 3 3 #"non"
0 0 24 3 1 #" "
0 0 14 3 8 #"accepted"
0 0 24 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 24 3 1 #" "
0 0 14 3 3 #"eg:"
0 0 24 3 1 #" "
0 0 14 3 3 #"\\j>"
0 0 28 3 1 #","
0 0 24 3 2 #"  "
0 0 19 3 11 #"\"         \""
0 0 24 3 2 #" ("
0 0 14 3 2 #"La"
0 0 24 3 1 #" "
0 0 14 3 7 #"segunda"
0 0 24 3 1 #" "
0 0 14 3 7 #"comilla"
0 0 24 3 1 #" "
0 0 14 3 2 #"es"
0 0 24 3 1 #" "
0 0 14 3 4 #"para"
0 0 24 3 1 #" "
0 0 14 3 6 #"cerrar"
0 0 24 3 1 #" "
0 0 14 3 2 #"la"
0 0 24 3 1 #" "
0 0 14 3 7 #"primera"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"Accepted"
0 0 24 3 1 #" "
0 0 14 3 2 #"as"
0 0 24 3 1 #" "
0 0 14 3 10 #"character:"
0 0 24 3 1 #" "
0 0 14 3 10 #"whitespace"
0 0 28 3 1 #","
0 0 24 3 1 #" "
0 0 14 3 2 #"\\\""
0 0 28 3 1 #","
0 0 24 3 1 #" "
0 0 14 3 2 #"\\n"
0 0 28 3 1 #","
0 0 24 3 1 #" "
0 0 14 3 2 #"\\a"
0 0 28 3 1 #","
0 0 24 3 1 #" "
0 0 15 3 2 #"\316\273"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 2 #" ("
0 0 14 3 9 #"globalId1"
0 0 24 3 1 #" "
0 0 14 3 9 #"globalId2"
0 0 24 3 5 #") (#("
0 0 14 3 20 #"struct:character-exp"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"'a \""
0 0 24 3 4 #") #("
0 0 14 3 20 #"struct:character-exp"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"'$ \""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   #("
0 0 14 3 20 #"struct:character-exp"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"'| \""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 2 #"9."
0 0 24 3 1 #" "
0 0 17 3 11 #";string-exp"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 145
(11
 #"\"{globalId1 = $Strings can include whitespaces$ , globalId2 = $also "
 #"letters, numbers 5654684, and other symbols: ! % & / ( ) = ? \xC2\xA1"
 #" $ } endGlobal"
) 0 0 19 29 1 #"\n"
0 0 19 3 33 #"   $but not money symbol or  $  \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 8 #"answer:#"
0 0 24 3 1 #"("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"globalId1"
0 0 24 3 1 #" "
0 0 14 3 9 #"globalId2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"     (#("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 35 #"\"$Strings can include whitespaces$\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 73
(12
 #"\"$also letters, numbers 5654684, and other symbols: ! % & / ( ) = ? "
 #"\xC2\xA1 $\""
) 0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   #("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"$but not money symbol or  $\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"10."
0 0 24 3 1 #" "
0 0 17 3 12 #";boolean-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 59
#"\"{globalId1 = #true , globalId2 = #false } endGlobal #true\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 2 #" ("
0 0 14 3 9 #"globalId1"
0 0 24 3 1 #" "
0 0 14 3 9 #"globalId2"
0 0 24 3 5 #") (#("
0 0 14 3 18 #"struct:boolean-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 4 #") #("
0 0 14 3 18 #"struct:boolean-exp"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"#false\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   #("
0 0 14 3 18 #"struct:boolean-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"11."
0 0 24 3 1 #" "
0 0 17 3 10 #";allot-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 33 #"\"{} endGlobal allot idAllot <- 5\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 10 #" () ()) #("
0 0 14 3 16 #"struct:allot-exp"
0 0 24 3 1 #" "
0 0 14 3 7 #"idAllot"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"12."
0 0 24 3 1 #" "
0 0 17 3 10 #";octal-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 82
(13
 #"\"{globalId1 = x8(0) , globalId2 = x8(153, 25.7) } endGlobal x8(-0, -"
 #"15.24, 44502)\""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 8 #"answer:#"
0 0 24 3 1 #"("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 2 #" ("
0 0 14 3 9 #"globalId1"
0 0 24 3 1 #" "
0 0 14 3 9 #"globalId2"
0 0 24 3 5 #") (#("
0 0 14 3 16 #"struct:octal-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 7 #" ()) #("
0 0 14 3 16 #"struct:octal-exp"
0 0 24 3 1 #" "
0 0 21 3 3 #"153"
0 0 24 3 2 #" ("
0 0 21 3 4 #"25.7"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   #("
0 0 14 3 16 #"struct:octal-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 21 3 6 #"-15.24"
0 0 24 3 1 #" "
0 0 21 3 5 #"44502"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"13."
0 0 24 3 1 #" "
0 0 17 3 9 #";list-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 71
(14
 #"\"{globalId1 = () , globalId2 = (x8(153, 25.7)) } endGlobal ('c , #tr"
 #"ue,"
) 0 0 19 29 1 #"\n"
0 0 19 3 66
#"   ($nested list expression$, ($even more nested list$)), 8, 'a )\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 2 #" ("
0 0 14 3 9 #"globalId1"
0 0 24 3 1 #" "
0 0 14 3 9 #"globalId2"
0 0 24 3 5 #") (#("
0 0 14 3 15 #"struct:list-exp"
0 0 24 3 7 #" ()) #("
0 0 14 3 15 #"struct:list-exp"
0 0 24 3 4 #" (#("
0 0 14 3 16 #"struct:octal-exp"
0 0 24 3 1 #" "
0 0 21 3 3 #"153"
0 0 24 3 2 #" ("
0 0 21 3 4 #"25.7"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 15 #"struct:list-exp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    (#("
0 0 14 3 20 #"struct:character-exp"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"'c \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     #("
0 0 14 3 18 #"struct:boolean-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     #("
0 0 14 3 15 #"struct:list-exp"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"       (#("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 26 #"\"$nested list expression$\""
0 0 24 3 4 #") #("
0 0 14 3 15 #"struct:list-exp"
0 0 24 3 4 #" (#("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"$even more nested list$\""
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     #("
0 0 14 3 20 #"struct:character-exp"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"'a \""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"14."
0 0 24 3 1 #" "
0 0 17 3 9 #";cons-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 33 #"\"{} endGlobal cons (3 (7, 5, 2))\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 15 #"struct:cons-exp"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 4 #") #("
0 0 14 3 15 #"struct:list-exp"
0 0 24 3 4 #" (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 21 3 3 #"15."
0 0 24 3 1 #" "
0 0 17 3 9 #";func-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 62
#"\"{} endGlobal func (arg1, arg2, arg3){[[arg1 + arg2] / arg3]}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 15 #"struct:func-exp"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"arg1"
0 0 24 3 1 #" "
0 0 14 3 4 #"arg2"
0 0 24 3 1 #" "
0 0 14 3 4 #"arg3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 22 #"struct:primapp-bin-exp"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 22 #"struct:primapp-bin-exp"
0 0 24 3 3 #" #("
0 0 14 3 21 #"struct:identifier-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"arg1"
0 0 24 3 4 #") #("
0 0 14 3 15 #"struct:add-prim"
0 0 24 3 4 #") #("
0 0 14 3 21 #"struct:identifier-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"arg2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 15 #"struct:div-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 21 #"struct:identifier-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"arg3"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"16."
0 0 24 3 1 #" "
0 0 17 3 9 #";call-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 31 #"\"{} endGlobal call(g -> 4 5 6)\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 15 #"struct:call-exp"
0 0 24 3 3 #" #("
0 0 14 3 21 #"struct:identifier-exp"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 5 #") (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"17."
0 0 24 3 1 #" "
0 0 17 3 8 #";map-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 65
#"\"{} endGlobal map (func (arg){[[arg * 57] % 19]} (15, 18, 1423))\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 14 #"struct:map-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 15 #"struct:func-exp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"arg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 22 #"struct:primapp-bin-exp"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        #("
0 0 14 3 22 #"struct:primapp-bin-exp"
0 0 24 3 3 #" #("
0 0 14 3 21 #"struct:identifier-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 4 #") #("
0 0 14 3 16 #"struct:mult-prim"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"57"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        #("
0 0 14 3 15 #"struct:mod-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"19"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 15 #"struct:list-exp"
0 0 24 3 4 #" (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"18"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 4 #"1423"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"18."
0 0 24 3 1 #" "
0 0 17 3 11 #";filter-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 64
#"\"{} endGlobal filter(func (arg){>= ( arg, 57 )} (15, 18, 1423))\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:filter-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 15 #"struct:func-exp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"arg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 3 3 #" #("
0 0 14 3 23 #"struct:compare-bool-exp"
0 0 24 3 3 #" #("
0 0 14 3 25 #"struct:greater-equal-prim"
0 0 24 3 4 #") #("
0 0 14 3 21 #"struct:identifier-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"57"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 15 #"struct:list-exp"
0 0 24 3 4 #" (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"18"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 4 #"1423"
0 0 24 3 6 #"))))) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"19."
0 0 24 3 1 #" "
0 0 17 3 11 #";maxVal-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 40 #"\"{} endGlobal maxVal ( (15, 18, 1423) )\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:maxVal-exp"
0 0 24 3 3 #" #("
0 0 14 3 15 #"struct:list-exp"
0 0 24 3 4 #" (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"18"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 4 #"1423"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"20."
0 0 24 3 1 #" "
0 0 17 3 11 #";minVal-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 40 #"\"{} endGlobal minVal ( (15, 18, 1423) )\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:minVal-exp"
0 0 24 3 3 #" #("
0 0 14 3 15 #"struct:list-exp"
0 0 24 3 4 #" (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"18"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 4 #"1423"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"21."
0 0 24 3 1 #" "
0 0 17 3 11 #";n-root-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"{} endGlobal n-root (3, 27) \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 10 #" () ()) #("
0 0 14 3 17 #"struct:n-root-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 2 #"27"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"22."
0 0 24 3 1 #" "
0 0 17 3 10 #";power-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 32 #"\"{} endGlobal power-nth (2, 3) \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 10 #" () ()) #("
0 0 14 3 16 #"struct:power-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 3 #"23."
0 0 24 3 1 #" "
0 0 17 3 11 #";vector-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 70
(15
 #"\"{globalId1 = vector[] , globalId2 = vector[x8(153, 25.7)] } endGlob"
 #"al"
) 0 0 19 29 1 #"\n"
0 0 19 3 112
(16
 #"   vector['c , #true, vector[$nested vector expression$, vector[$even"
 #" more nested vector expression$]], 8, 'a ]\""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 2 #" ("
0 0 14 3 9 #"globalId1"
0 0 24 3 1 #" "
0 0 14 3 9 #"globalId2"
0 0 24 3 5 #") (#("
0 0 14 3 17 #"struct:vector-exp"
0 0 24 3 7 #" ()) #("
0 0 14 3 17 #"struct:vector-exp"
0 0 24 3 4 #" (#("
0 0 14 3 16 #"struct:octal-exp"
0 0 24 3 1 #" "
0 0 21 3 3 #"153"
0 0 24 3 2 #" ("
0 0 21 3 4 #"25.7"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:vector-exp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    (#("
0 0 14 3 20 #"struct:character-exp"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"'c \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     #("
0 0 14 3 18 #"struct:boolean-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     #("
0 0 14 3 17 #"struct:vector-exp"
0 0 24 3 4 #" (#("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"$nested vector expression$\""
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:vector-exp"
0 0 24 3 4 #" (#("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 38 #"\"$even more nested vector expression$\""
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     #("
0 0 14 3 20 #"struct:character-exp"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"'a \""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"24."
0 0 24 3 1 #" "
0 0 17 3 11 #";record-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 91
(17
 #"\"{globalId1 = record{id1 = $at least one allot$} , globalId2 = recor"
 #"d{idRG = 1} } endGlobal"
) 0 0 19 29 1 #"\n"
0 0 19 3 71
(18
 #" record{recId1 = 'c , recId2 = $Jerusalema$, recId3 = vector[5, 2, 8]"
 #"}\""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"globalId1"
0 0 24 3 1 #" "
0 0 14 3 9 #"globalId2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    (#("
0 0 14 3 17 #"struct:record-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"id1"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"$at least one allot$\""
0 0 24 3 11 #") () ()) #("
0 0 14 3 17 #"struct:record-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"idRG"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 10 #") () ())))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:record-exp"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 6 #"recId1"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 20 #"struct:character-exp"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"'c \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"recId2"
0 0 24 3 1 #" "
0 0 14 3 6 #"recId3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    (#("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"$Jerusalema$\""
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:vector-exp"
0 0 24 3 4 #" (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"25."
0 0 24 3 1 #" "
0 0 17 3 9 #";bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 52 #"\"{globalId1 = #true , globalId2 = #false } endGlobal"
0 0 19 29 1 #"\n"
0 0 19 3 10 #" {#false}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 2 #" ("
0 0 14 3 9 #"globalId1"
0 0 24 3 1 #" "
0 0 14 3 9 #"globalId2"
0 0 24 3 5 #") (#("
0 0 14 3 18 #"struct:boolean-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 4 #") #("
0 0 14 3 18 #"struct:boolean-exp"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"#false\""
0 0 24 3 6 #"))) #("
0 0 14 3 18 #"struct:boolean-exp"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"#false\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"26."
0 0 24 3 1 #" "
0 0 17 3 17 #";compare-bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"{} endGlobal"
0 0 19 29 1 #"\n"
0 0 19 3 39 #" if ( < (19, -23.5)) then {1} else {0}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 13 #"struct:if-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 23 #"struct:compare-bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        #("
0 0 14 3 16 #"struct:less-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"19"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 5 #"-23.5"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"27."
0 0 24 3 1 #" "
0 0 17 3 18 #";oper-bin-bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 51
#"\"{} endGlobal xor (null? ((8, 2)), vector? ('\303\261 ))\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 24 #"struct:oper-bin-bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 15 #"struct:xor-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 25 #"struct:null-pred-bool-exp"
0 0 24 3 3 #" #("
0 0 14 3 21 #"struct:pred-null-prim"
0 0 24 3 4 #") #("
0 0 14 3 15 #"struct:list-exp"
0 0 24 3 4 #" (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 27 #"struct:vector-pred-bool-exp"
0 0 24 3 3 #" #("
0 0 14 3 25 #"struct:pred-isvector-prim"
0 0 24 3 4 #") #("
0 0 14 3 20 #"struct:character-exp"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"'\303\261 \""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"      ())))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"28."
0 0 24 3 1 #" "
0 0 17 3 21 #";vector-pred-bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 45 #"\"{} endGlobal vector? (create-vector [9, 2])\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 8 #"answer:#"
0 0 24 3 1 #"("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 27 #"struct:vector-pred-bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 25 #"struct:pred-isvector-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 28 #"struct:primapp-create-vector"
0 0 24 3 3 #" #("
0 0 14 3 25 #"struct:create-vector-prim"
0 0 24 3 5 #") (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"29."
0 0 24 3 1 #" "
0 0 17 3 19 #";list-pred-bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 49 #"\"{} endGlobal list? (('c , $a string$, -19.20 ))\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 5 #"   #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 25 #"struct:list-pred-bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 23 #"struct:pred-islist-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 15 #"struct:list-exp"
0 0 24 3 4 #" (#("
0 0 14 3 20 #"struct:character-exp"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"'c \""
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"$a string$\""
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 5 #"-19.2"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"30."
0 0 24 3 1 #" "
0 0 17 3 21 #";record-pred-bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 62
#"\"{} endGlobal record? (record {id1 = 9, id2 = 81, id3 = 243})\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 8 #"answer:#"
0 0 24 3 1 #"("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     #("
0 0 14 3 27 #"struct:record-pred-bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       #("
0 0 14 3 25 #"struct:pred-isrecord-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       #("
0 0 14 3 17 #"struct:record-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"id1"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 3 #") ("
0 0 14 3 3 #"id2"
0 0 24 3 1 #" "
0 0 14 3 3 #"id3"
0 0 24 3 5 #") (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"81"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 3 #"243"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"31."
0 0 24 3 1 #" "
0 0 17 3 19 #";null-pred-bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 31 #"\"{} endGlobal null? (vector[])\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 8 #"answer:#"
0 0 24 3 1 #"("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 3 3 #" #("
0 0 14 3 25 #"struct:null-pred-bool-exp"
0 0 24 3 3 #" #("
0 0 14 3 21 #"struct:pred-null-prim"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:vector-exp"
0 0 24 3 7 #" ()))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"32."
0 0 24 3 1 #" "
0 0 17 3 15 #";simpe-bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"{} endGlobal"
0 0 19 29 1 #"\n"
0 0 19 3 10 #" {#false}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 10 #" () ()) #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 3 3 #" #("
0 0 14 3 21 #"struct:simpe-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"#false\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"33."
0 0 24 3 1 #" "
0 0 17 3 11 #";oper-a-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"{} endGlobal"
0 0 19 29 1 #"\n"
0 0 19 3 16 #" not ({#false})\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"Answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:oper-a-exp"
0 0 24 3 3 #" #("
0 0 14 3 15 #"struct:not-prim"
0 0 24 3 4 #") #("
0 0 14 3 21 #"struct:simpe-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"#false\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"34."
0 0 24 3 1 #" "
0 0 17 3 13 #";sequence-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 52 #"\"{globalId1 = #true , globalId2 = #false } endGlobal"
0 0 19 29 1 #"\n"
0 0 19 3 50 #" sequence (6; #true; sequence($nested sequence$))\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 2 #" ("
0 0 14 3 9 #"globalId1"
0 0 24 3 1 #" "
0 0 14 3 9 #"globalId2"
0 0 24 3 5 #") (#("
0 0 14 3 18 #"struct:boolean-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 4 #") #("
0 0 14 3 18 #"struct:boolean-exp"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"#false\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   #("
0 0 14 3 19 #"struct:sequence-exp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"     (#("
0 0 14 3 18 #"struct:boolean-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 4 #") #("
0 0 14 3 19 #"struct:sequence-exp"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"$nested sequence$\""
0 0 24 3 8 #") ()))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"34."
0 0 24 3 2 #"  "
0 0 17 3 7 #";if-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"{} endGlobal"
0 0 19 29 1 #"\n"
0 0 19 3 38 #" if (< (19, -23.5)) then {1} else {0}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 13 #"struct:if-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 23 #"struct:compare-bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        #("
0 0 14 3 16 #"struct:less-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"19"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 5 #"-23.5"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"35."
0 0 24 3 1 #" "
0 0 17 3 9 #";cond-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"{} endGlobal"
0 0 19 29 1 #"\n"
0 0 19 3 6 #" cond("
0 0 19 29 1 #"\n"
0 0 19 3 23 #"   ([< (19, -23.5)]'F )"
0 0 19 29 1 #"\n"
0 0 19 3 44 #"   ([ and ({#true}, {#false}, {#true} )] 15)"
0 0 19 29 1 #"\n"
0 0 19 3 24 #"   ([<> (0, 0.1)] $OMG$)"
0 0 19 29 1 #"\n"
0 0 19 3 27 #"   else allot back_V <- -1)"
0 0 19 29 1 #"\n"
0 0 19 3 2 #" \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 15 #"struct:cond-exp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    (#("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       #("
0 0 14 3 23 #"struct:compare-bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         #("
0 0 14 3 16 #"struct:less-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"19"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 5 #"-23.5"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       #("
0 0 14 3 24 #"struct:oper-bin-bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         #("
0 0 14 3 15 #"struct:and-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         #("
0 0 14 3 22 #"struct:simple-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         #("
0 0 14 3 22 #"struct:simple-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"#false\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"         (#("
0 0 14 3 22 #"struct:simple-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       #("
0 0 14 3 23 #"struct:compare-bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         #("
0 0 14 3 21 #"struct:different-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    (#("
0 0 14 3 20 #"struct:character-exp"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"'F \""
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"$OMG$\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 16 #"struct:allot-exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"back_V"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"36."
0 0 24 3 1 #" "
0 0 17 3 8 #";for-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"{} endGlobal"
0 0 19 29 1 #"\n"
0 0 19 3 56 #" for (id1 = 16; downto 0) {allot xVal <- not ({#true})}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 14 #"struct:for-exp"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 3 #"id1"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:downto-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 16 #"struct:allot-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 4 #"xVal"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        #("
0 0 14 3 17 #"struct:oper-a-exp"
0 0 24 3 3 #" #("
0 0 14 3 15 #"struct:not-prim"
0 0 24 3 4 #") #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 3 3 #" #("
0 0 14 3 22 #"struct:simple-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"37."
0 0 24 3 1 #" "
0 0 17 3 10 #";while-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 34 #"\"{} endGlobal while ({#true}) do {"
0 0 19 29 1 #"\n"
0 0 19 3 75
(19
 #"                     for (id1 = 16; downto 0) {allot xVal <- not ({#t"
 #"rue})}"
) 0 0 19 29 1 #"\n"
0 0 19 3 27 #"                   } done \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 6 #"expect"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 16 #"struct:while-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 22 #"struct:simple-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 14 #"struct:for-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 3 #"id1"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 17 #"struct:downto-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 16 #"struct:allot-exp"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"xVal"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          #("
0 0 14 3 17 #"struct:oper-a-exp"
0 0 24 3 3 #" #("
0 0 14 3 15 #"struct:not-prim"
0 0 24 3 4 #") #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 3 3 #" #("
0 0 14 3 22 #"struct:simple-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"38."
0 0 24 3 1 #" "
0 0 17 3 10 #";print-exp"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"{} endGlobal print(x)\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 10 #" () ()) #("
0 0 14 3 16 #"struct:print-exp"
0 0 24 3 3 #" #("
0 0 14 3 21 #"struct:identifier-exp"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"39."
0 0 24 3 1 #" "
0 0 17 3 7 #";to-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 65
#"\"{} endGlobal for (id1 = 16; to 0) {allot xVal <- not ({#true})}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 14 #"struct:for-exp"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 3 #"id1"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 13 #"struct:to-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 16 #"struct:allot-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 4 #"xVal"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        #("
0 0 14 3 17 #"struct:oper-a-exp"
0 0 24 3 3 #" #("
0 0 14 3 15 #"struct:not-prim"
0 0 24 3 4 #") #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 3 3 #" #("
0 0 14 3 22 #"struct:simple-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"40."
0 0 24 3 1 #" "
0 0 17 3 11 #";downto-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"{} endGlobal"
0 0 19 29 1 #"\n"
0 0 19 3 56 #" for (id1 = 16; downto 0) {allot xVal <- not ({#true})}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 14 #"struct:for-exp"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 3 #"id1"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:downto-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 16 #"struct:allot-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 4 #"xVal"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        #("
0 0 14 3 17 #"struct:oper-a-exp"
0 0 24 3 3 #" #("
0 0 14 3 15 #"struct:not-prim"
0 0 24 3 4 #") #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 3 3 #" #("
0 0 14 3 22 #"struct:simple-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"41."
0 0 24 3 1 #" "
0 0 17 3 16 #";primapp-bin-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"{} endGlobal [25%3]\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"Answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 22 #"struct:primapp-bin-exp"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"25"
0 0 24 3 4 #") #("
0 0 14 3 15 #"struct:mod-prim"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"42."
0 0 24 3 1 #" "
0 0 17 3 15 #";primapp-un-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"{} endGlobal"
0 0 19 29 1 #"\n"
0 0 19 3 12 #" ++(x8(17))\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"Answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 21 #"struct:primapp-un-exp"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:add1-prim"
0 0 24 3 4 #") #("
0 0 14 3 16 #"struct:octal-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"17"
0 0 24 3 6 #" ())))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"43."
0 0 24 3 1 #" "
0 0 17 3 19 #";primapp-bin-string"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 42 #"\"{} endGlobal concat ( $Head$, $-tail.$ )\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 25 #"struct:primapp-bin-string"
0 0 24 3 3 #" #("
0 0 14 3 18 #"struct:concat-prim"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"$Head$\""
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"$-tail.$\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"44."
0 0 24 3 1 #" "
0 0 17 3 22 #";primapp-un-length-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 37 #"\"{} endGlobal length ( $Head-tail.$)\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"Answer:"
0 0 24 29 1 #"\n"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 28 #"struct:primapp-un-length-exp"
0 0 24 3 3 #" #("
0 0 14 3 18 #"struct:length-prim"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"$Head-tail.$\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"45."
0 0 24 3 1 #" "
0 0 17 3 20 #";primapp-un-list-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 62
#"\"{} endGlobal create-list (16 , x8(621), $random words$, 'k )\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"#("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 26 #"struct:primapp-create-list"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 23 #"struct:create-list-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     #("
0 0 14 3 16 #"struct:octal-exp"
0 0 24 3 1 #" "
0 0 21 3 3 #"621"
0 0 24 3 4 #" ())"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     #("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"$random words$\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     #("
0 0 14 3 20 #"struct:character-exp"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"'k \""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"46."
0 0 24 3 1 #" "
0 0 17 3 20 #";primapp-create-list"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 62
#"\"{} endGlobal create-list (16 , x8(621), $random words$, 'k )\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   #("
0 0 14 3 26 #"struct:primapp-create-list"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     #("
0 0 14 3 23 #"struct:create-list-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"     (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 4 #") #("
0 0 14 3 16 #"struct:octal-exp"
0 0 24 3 1 #" "
0 0 21 3 3 #"621"
0 0 24 3 7 #" ()) #("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"$random words$\""
0 0 24 3 4 #") #("
0 0 14 3 20 #"struct:character-exp"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"'k \""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"47."
0 0 24 3 1 #" "
0 0 17 3 21 #";primapp-bin-list-exp"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 77
(20
 #"\"{} endGlobal append (create-list (16 , x8(621), $random words$, 'k "
 #"), null)\""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   #("
0 0 14 3 27 #"struct:primapp-bin-list-exp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     #("
0 0 14 3 23 #"struct:append-list-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     #("
0 0 14 3 26 #"struct:primapp-un-list-exp"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       #("
0 0 14 3 23 #"struct:create-list-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"       (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 4 #") #("
0 0 14 3 16 #"struct:octal-exp"
0 0 24 3 1 #" "
0 0 21 3 3 #"621"
0 0 24 3 7 #" ()) #("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"$random words$\""
0 0 24 3 4 #") #("
0 0 14 3 20 #"struct:character-exp"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"'k \""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     #("
0 0 14 3 20 #"struct:null-list-exp"
0 0 24 3 3 #" #("
0 0 14 3 21 #"struct:null-list-prim"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"48."
0 0 24 3 1 #" "
0 0 17 3 23 #";primapp-bin-set-vector"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 50 #"\"{} endGlobal set-vector (0 'C  vector [1, 2, 3])\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 29 #"struct:primapp-bin-set-vector"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 22 #"struct:set-vector-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 1 #"0"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 20 #"struct:character-exp"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"'C \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:vector-exp"
0 0 24 3 4 #" (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"49."
0 0 24 3 1 #" "
0 0 17 3 23 #";primapp-bin-ref-vector"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 47 #"\"{} endGlobal ref-vector (0 vector [1, 2, 3]) \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 7 #"expecte"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 29 #"struct:primapp-bin-ref-vector"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 22 #"struct:ref-vector-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 1 #"0"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:vector-exp"
0 0 24 3 4 #" (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"50."
0 0 24 3 1 #" "
0 0 17 3 22 #";primapp-create-vector"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 45 #"\"{} endGlobal create-vector [8, 18, -21, 57]\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 28 #"struct:primapp-create-vector"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 25 #"struct:create-vector-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"18"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 3 #"-21"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"57"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"51."
0 0 24 3 1 #" "
0 0 17 3 19 #";primapp-bin-record"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 74
(21
 #"\"{} endGlobal ref-record(4 create-record{rec1 = 8, rec2 = 15, rec3 ="
 #" 25})\""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 29 #"struct:primapp-bin-ref-record"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 22 #"struct:ref-record-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 1 #"4"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 28 #"struct:primapp-create-record"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 25 #"struct:record-create-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 4 #"rec1"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"rec2"
0 0 24 3 1 #" "
0 0 14 3 4 #"rec3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"25"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"52."
0 0 24 3 1 #" "
0 0 17 3 23 #";primapp-bin-ref-record"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 62
#"\"{} endGlobal ref-record(0 create-record {x = 2,y = {#true}})\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 29 #"struct:primapp-bin-ref-record"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 22 #"struct:ref-record-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 1 #"0"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 28 #"struct:primapp-create-record"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 25 #"struct:record-create-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 1 #"x"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      (#("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 3 3 #" #("
0 0 14 3 22 #"struct:simple-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"53."
0 0 24 3 1 #" "
0 0 17 3 23 #";primapp-bin-set-record"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 71
(22
 #"\"{} endGlobal set-record(1 {#false} create-record {x = 2,y = {#true}"
 #"})\""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 29 #"struct:primapp-bin-set-record"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 22 #"struct:set-record-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 1 #"1"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 3 3 #" #("
0 0 14 3 22 #"struct:simple-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"#false\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 28 #"struct:primapp-create-record"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 25 #"struct:record-create-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 1 #"x"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      (#("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 3 3 #" #("
0 0 14 3 22 #"struct:simple-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"54."
0 0 24 3 1 #" "
0 0 17 3 22 #";primapp-create-record"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 60
#"\"{} endGlobal create-record{rec1 = 8, rec2 = 15, rec3 = 25}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 28 #"struct:primapp-create-record"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 25 #"struct:record-create-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 4 #"rec1"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rec2"
0 0 24 3 1 #" "
0 0 14 3 4 #"rec3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"25"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"55."
0 0 24 3 1 #" "
0 0 17 3 9 #";add-prim"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"{} endGlobal [15 + 3]\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 22 #"struct:primapp-bin-exp"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 4 #") #("
0 0 14 3 15 #"struct:add-prim"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 21 3 3 #"56."
0 0 24 3 1 #" "
0 0 17 3 9 #";sub-prim"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"{} endGlobal [15 ~ 3]\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 22 #"struct:primapp-bin-exp"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 4 #") #("
0 0 14 3 15 #"struct:sub-prim"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"57."
0 0 24 3 1 #" "
0 0 17 3 10 #";mult-prim"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"{} endGlobal [15 * 3]\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 22 #"struct:primapp-bin-exp"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 4 #") #("
0 0 14 3 16 #"struct:mult-prim"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"58."
0 0 24 3 1 #" "
0 0 17 3 9 #";mod-prim"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"{} endGlobal [15 % 3]\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 22 #"struct:primapp-bin-exp"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 4 #") #("
0 0 14 3 15 #"struct:mod-prim"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"59."
0 0 24 3 1 #" "
0 0 17 3 9 #";div-prim"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"{} endGlobal [15 / 3]\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 22 #"struct:primapp-bin-exp"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 4 #") #("
0 0 14 3 15 #"struct:div-prim"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"60."
0 0 24 3 1 #" "
0 0 17 3 10 #";add1-prim"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"{} endGlobal ++(0)\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 10 #" () ()) #("
0 0 14 3 21 #"struct:primapp-un-exp"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:add1-prim"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"61."
0 0 24 3 1 #" "
0 0 17 3 10 #";sub1-prim"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"{} endGlobal --(10)\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 10 #" () ()) #("
0 0 14 3 21 #"struct:primapp-un-exp"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:sub1-prim"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 21 3 3 #"62."
0 0 24 3 1 #" "
0 0 17 3 12 #";length-prim"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 42 #"\"{} endGlobal length ($arbitrary string$)\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 28 #"struct:primapp-un-string-exp"
0 0 24 3 3 #" #("
0 0 14 3 18 #"struct:length-prim"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"$arbitrary string$\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"63."
0 0 24 3 1 #" "
0 0 17 3 12 #";concat-prim"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 43 #"\"{} endGlobal concat (15, create-list () )\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 25 #"struct:primapp-bin-string"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 18 #"struct:concat-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 26 #"struct:primapp-create-list"
0 0 24 3 3 #" #("
0 0 14 3 23 #"struct:create-list-prim"
0 0 24 3 7 #") ())))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"64."
0 0 24 3 1 #" "
0 0 17 3 15 #";head-list-prim"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 46 #"\"{} endGlobal top (create-list (0, 1, 2, 3) )\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 26 #"struct:primapp-un-list-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 21 #"struct:head-list-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 26 #"struct:primapp-create-list"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 23 #"struct:create-list-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"65."
0 0 24 3 1 #" "
0 0 17 3 15 #";tail-list-prim"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"{} endGlobal pop (create-list () )\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 26 #"struct:primapp-un-list-exp"
0 0 24 3 3 #" #("
0 0 14 3 21 #"struct:tail-list-prim"
0 0 24 3 4 #") #("
0 0 14 3 26 #"struct:primapp-create-list"
0 0 24 3 3 #" #("
0 0 14 3 23 #"struct:create-list-prim"
0 0 24 3 7 #") ())))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"66."
0 0 24 3 1 #" "
0 0 17 3 17 #";pred-islist-prim"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 37 #"\"{} endGlobal list? (create-list ())\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 25 #"struct:list-pred-bool-exp"
0 0 24 3 3 #" #("
0 0 14 3 23 #"struct:pred-islist-prim"
0 0 24 3 4 #") #("
0 0 14 3 26 #"struct:primapp-create-list"
0 0 24 3 3 #" #("
0 0 14 3 23 #"struct:create-list-prim"
0 0 24 3 8 #") ()))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"67."
0 0 24 3 1 #" "
0 0 17 3 17 #";append-list-prim"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 77 20 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 27 #"struct:primapp-bin-list-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 23 #"struct:append-list-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 26 #"struct:primapp-create-list"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 23 #"struct:create-list-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 4 #") #("
0 0 14 3 16 #"struct:octal-exp"
0 0 24 3 1 #" "
0 0 21 3 3 #"621"
0 0 24 3 7 #" ()) #("
0 0 14 3 17 #"struct:string-exp"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"$random words$\""
0 0 24 3 4 #") #("
0 0 14 3 20 #"struct:character-exp"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"'k \""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 21 #"struct:identifier-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"null"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"68."
0 0 24 3 1 #" "
0 0 17 3 17 #";create-list-prim"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 37 #"\"{} endGlobal list? (create-list ())\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 25 #"struct:list-pred-bool-exp"
0 0 24 3 3 #" #("
0 0 14 3 23 #"struct:pred-islist-prim"
0 0 24 3 4 #") #("
0 0 14 3 26 #"struct:primapp-create-list"
0 0 24 3 3 #" #("
0 0 14 3 23 #"struct:create-list-prim"
0 0 24 3 8 #") ()))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"69."
0 0 24 3 1 #" "
0 0 17 3 16 #";ref-vector-prim"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 60
#"\"{} endGlobal ref-vector (0 create-vector [8, 18, -21, 57])\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 29 #"struct:primapp-bin-ref-vector"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 22 #"struct:ref-vector-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 1 #"0"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 28 #"struct:primapp-create-vector"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 25 #"struct:create-vector-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"18"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 3 #"-21"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"57"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"70."
0 0 24 3 1 #" "
0 0 17 3 16 #";set-vector-prim"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 63
#"\"{} endGlobal set-vector (0 15 create-vector [8, 18, -21, 57])\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 29 #"struct:primapp-bin-set-vector"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 22 #"struct:set-vector-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 1 #"0"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 28 #"struct:primapp-create-vector"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 25 #"struct:create-vector-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"18"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 3 #"-21"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"57"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"71."
0 0 24 3 1 #" "
0 0 17 3 19 #";pred-isvector-prim"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 50 #"\"{} endGlobal vector? (create-vector [9, 16, 81])\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 27 #"struct:vector-pred-bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 25 #"struct:pred-isvector-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 28 #"struct:primapp-create-vector"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        #("
0 0 14 3 25 #"struct:create-vector-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"        (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"81"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"72."
0 0 24 3 1 #" "
0 0 17 3 19 #";create-vector-prim"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 40 #"\"{} endGlobal create-vector [9, 16, 81]\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 28 #"struct:primapp-create-vector"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 25 #"struct:create-vector-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"81"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"73."
0 0 24 3 1 #" "
0 0 17 3 19 #";pred-isrecord-prim"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 70
(23
 #"\"{} endGlobal record? (create-record{rec1 = 8, rec2 = 15, rec3 = 25}"
 #")\""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 27 #"struct:record-pred-bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 25 #"struct:pred-isrecord-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 28 #"struct:primapp-create-record"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        #("
0 0 14 3 25 #"struct:record-create-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"rec1"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"rec2"
0 0 24 3 1 #" "
0 0 14 3 4 #"rec3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"        (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"25"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"74."
0 0 24 3 1 #" "
0 0 17 3 19 #";record-create-prim"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 60
#"\"{} endGlobal create-record{rec1 = 8, rec2 = 15, rec3 = 25}\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 28 #"struct:primapp-create-record"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 25 #"struct:record-create-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 4 #"rec1"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rec2"
0 0 24 3 1 #" "
0 0 14 3 4 #"rec3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"25"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"75."
0 0 24 3 1 #" "
0 0 17 3 16 #";ref-record-prim"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 74
(24
 #"\"{} endGlobal ref-record(1 create-record{rec1 = 8, rec2 = 15, rec3 ="
 #" 25})\""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 29 #"struct:primapp-bin-ref-record"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 22 #"struct:ref-record-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 1 #"1"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 28 #"struct:primapp-create-record"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 25 #"struct:record-create-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 4 #"rec1"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"rec2"
0 0 24 3 1 #" "
0 0 14 3 4 #"rec3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"25"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"76."
0 0 24 3 1 #" "
0 0 17 3 16 #";set-record-prim"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 77
(25
 #"\"{} endGlobal set-record(2 26 create-record{rec1 = 8, rec2 = 15, rec"
 #"3 = 25})\""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 29 #"struct:primapp-bin-set-record"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 22 #"struct:set-record-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 1 #"2"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"26"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 28 #"struct:primapp-create-record"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 25 #"struct:record-create-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 4 #"rec1"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"rec2"
0 0 24 3 1 #" "
0 0 14 3 4 #"rec3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      (#("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"25"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";logical expressions"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"77."
0 0 24 3 1 #" "
0 0 17 3 10 #";less-prim"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 26 #"\"{} endGlobal < (19, 297)\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 23 #"struct:compare-bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 16 #"struct:less-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"19"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 3 #"297"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"78."
0 0 24 3 1 #" "
0 0 17 3 13 #";greater-prim"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"{} endGlobal > (19, -23.5)\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 23 #"struct:compare-bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 19 #"struct:greater-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"19"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 5 #"-23.5"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"79."
0 0 24 3 1 #" "
0 0 17 3 16 #";less-equal-prim"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"{} endGlobal <= (19, -23.5)\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 23 #"struct:compare-bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 22 #"struct:less-equal-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"19"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 5 #"-23.5"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"80."
0 0 24 3 1 #" "
0 0 17 3 19 #";greater-equal-prim"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"{} endGlobal >= (19, -23.5)\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 23 #"struct:compare-bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 25 #"struct:greater-equal-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"19"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 5 #"-23.5"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"81."
0 0 24 3 1 #" "
0 0 17 3 11 #";equal-prim"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"{} endGlobal == (19, -23.5)\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 23 #"struct:compare-bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 17 #"struct:equal-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"19"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 5 #"-23.5"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"82."
0 0 24 3 1 #" "
0 0 17 3 15 #";different-prim"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"{} endGlobal <> (19, -23.5)\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 23 #"struct:compare-bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 21 #"struct:different-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"19"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 5 #"-23.5"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"83."
0 0 24 3 1 #" "
0 0 17 3 9 #";and-prim"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 38 #"\"{} endGlobal and ({#true}, {#false})\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 24 #"struct:oper-bin-bool-exp"
0 0 24 3 3 #" #("
0 0 14 3 15 #"struct:and-prim"
0 0 24 3 4 #") #("
0 0 14 3 22 #"struct:simple-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 4 #") #("
0 0 14 3 22 #"struct:simple-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"#false\""
0 0 24 3 7 #") ())))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"84."
0 0 24 3 1 #" "
0 0 17 3 8 #";or-prim"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 47 #"\"{} endGlobal or ({#true}, {#false}, {#false})\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 24 #"struct:oper-bin-bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 14 #"struct:or-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 22 #"struct:simple-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 22 #"struct:simple-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"#false\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      (#("
0 0 14 3 22 #"struct:simple-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"#false\""
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"85."
0 0 24 3 1 #" "
0 0 17 3 9 #";xor-prim"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 48 #"\"{} endGlobal xor ({#true}, {#false}, {#false})\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 24 #"struct:oper-bin-bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 15 #"struct:xor-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 22 #"struct:simple-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"#true\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      #("
0 0 14 3 22 #"struct:simple-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"#false\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      (#("
0 0 14 3 22 #"struct:simple-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"#false\""
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"86."
0 0 24 3 1 #" "
0 0 17 3 9 #";not-prim"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"{} endGlobal not ({#false})\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:oper-a-exp"
0 0 24 3 3 #" #("
0 0 14 3 15 #"struct:not-prim"
0 0 24 3 4 #") #("
0 0 14 3 22 #"struct:simple-bool-exp"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"#false\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"87."
0 0 24 3 1 #" "
0 0 17 3 14 #";even-bol-prim"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"{} endGlobal even? (19)\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:oper-a-exp"
0 0 24 3 3 #" #("
0 0 14 3 20 #"struct:even-bol-prim"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"19"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"88."
0 0 24 3 1 #" "
0 0 17 3 13 #";odd-bol-prim"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"{} endGlobal odd? (19)\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 10 #" () ()) #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 3 3 #" #("
0 0 14 3 17 #"struct:oper-a-exp"
0 0 24 3 3 #" #("
0 0 14 3 19 #"struct:odd-bol-prim"
0 0 24 3 4 #") #("
0 0 14 3 17 #"struct:number-exp"
0 0 24 3 1 #" "
0 0 21 3 2 #"19"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"89."
0 0 24 3 1 #" "
0 0 17 3 15 #";pred-null-prim"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 37 #"\"{} endGlobal null? (create-list ())\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"expected"
0 0 24 3 1 #" "
0 0 14 3 7 #"answer:"
0 0 24 3 3 #" #("
0 0 14 3 16 #"struct:a-program"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 17 #"struct:exp-global"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  #("
0 0 14 3 15 #"struct:bool-exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    #("
0 0 14 3 25 #"struct:null-pred-bool-exp"
0 0 24 3 3 #" #("
0 0 14 3 21 #"struct:pred-null-prim"
0 0 24 3 4 #") #("
0 0 14 3 26 #"struct:primapp-create-list"
0 0 24 3 3 #" #("
0 0 14 3 23 #"struct:create-list-prim"
0 0 24 3 8 #") ()))))"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
